{% extends "index.njk" %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}
{% import './_macros/bond-nav.njk' as bondNav %}
{% import '_macros/date-field.njk' as dateField %}

{% block pageTitle %}Bond Financial Details{% endblock %}

{% block content %}

  {% set showAdditionalFieldsByDefault = bond.transactionCurrencySameAsSupplyContractCurrency === "false" %}

  {% if validationErrors.count %}
    {{
      govukErrorSummary({
        titleText: "There is a problem",
        errorList: validationErrors.summary
      })
    }}
  {% endif %}

  {{ bondNav.render(
    completedForms = completedForms,
    current = 'bondFinancialDetails',
    contractId = dealId,
    childId = bond._id,
    bondStatus = bond.status
  )}}

  <hr class="govuk-section-break govuk-section-break--visible govuk-!-margin-bottom-8" />

  <form method="POST" autocomplete="off" novalidate>

    <div class="govuk-grid-row">
      <div class="govuk-grid-column-one-quarter">
        {{ govukInput({
          label: {
            text: "Bond value"
          },
          id: "bondValue",
          name: "bondValue",
          value: bond.bondValue,
          pattern: '[0-9][0-9,]{0,20}(\.?\d{0,2}|\d\.?\d{0,1}|\d{2}\.?)',
          attributes: {
            size: "60",
            maxlength: "255",
            placeholder: "0.00",
            'data-cy': 'bond-value'
          },
          errorMessage: validationErrors.errorList.bondValue and {
            text: validationErrors.errorList.bondValue.text,
            attributes: {
              'data-cy': 'bond-value-error-message'
            }
          }
        }) }}
      </div>
    </div>

    {{ govukRadios({
        classes: "govuk-radios--inline",
        idPrefix: "transactionCurrencySameAsSupplyContractCurrency",
        name: "transactionCurrencySameAsSupplyContractCurrency",
        fieldset: {
          legend: {
            text: "Is the currency for this Transaction the same as your Supply Contract currency?"
          }
        },
        items: [
          {
            value: "true",
            text: "Yes",
            checked: bond.transactionCurrencySameAsSupplyContractCurrency === "true",
            attributes: {
              'data-cy': 'transaction-currency-same-as-supply-contract-currency-yes',
              onClick: "showAdditionalFields(false)"
            }
          },
          {
            value: "false",
            text: "No",
            checked: bond.transactionCurrencySameAsSupplyContractCurrency === "false",
            attributes: {
              'data-cy': 'transaction-currency-same-as-supply-contract-currency-no',
              onClick: "showAdditionalFields(true)"
            }
          }
        ],
        errorMessage: validationErrors.errorList.transactionCurrencySameAsSupplyContractCurrency and {
          text: validationErrors.errorList.transactionCurrencySameAsSupplyContractCurrency.text,
          attributes: {
            'data-cy': 'transactionCurrencySameAsSupplyContractCurrency-error-message'
          }
        }
      }) }}
  
    <div
      id="additional-form-fields"
      {% if showAdditionalFieldsByDefault === false %}
      class="govuk-visually-hidden"
      {% endif %}
    >

      {{ govukSelect({
        id: "currency",
        name: "currency",
        label: {
          text: "Currency"
        },
        attributes: {
          'data-cy': 'currency'
        },
        items: currencies,
        errorMessage: (validationErrors.errorList.currency or (not bond['currency'] and validationErrors.conditionalErrorList.transactionCurrencySameAsSupplyContractCurrency['false'].currency)) and {
          attributes: {
            "data-cy": "currency-error-message"
          },
          text: validationErrors.errorList.currency.text or validationErrors.conditionalErrorList.transactionCurrencySameAsSupplyContractCurrency['false'].currency.text
        }
      }) }}

      {{ govukInput({
        inputmode: 'numeric',
        label: {
          text: "Conversion rate to the Supply Contract currency"
        },
        hint: {
          text: "E.g. EUR to USD (100 EUR/ 0.91 = 109.89 USD)"
        },
        classes: "govuk-input--width-10",
        id: "conversionRate",
        name: "conversionRate",
        value: bond.conversionRate,
        pattern: '[0-9]*\.[0-9]{0,6}',
        attributes: {
          'data-cy': 'conversion-rate',
          maxlength: '13'
        },
        errorMessage: (validationErrors.errorList.conversionRate or (not bond['conversionRate'] and validationErrors.conditionalErrorList.transactionCurrencySameAsSupplyContractCurrency['false'].conversionRate)) and {
          text: validationErrors.errorList.conversionRate.text or validationErrors.conditionalErrorList.transactionCurrencySameAsSupplyContractCurrency['false'].conversionRate.text,
          attributes: {
            'data-cy': 'conversion-rate-error-message'
          }
        }
      }) }}

      {{ dateField.render(
        legend = 'Conversion rate date',
        id = 'conversionRateDate',
        hint = 'For example, 27 11 2019',
        dayValue = bond['conversionRateDate-day'],
        monthValue = bond['conversionRateDate-month'],
        yearValue = bond['conversionRateDate-year'],
        error = validationErrors.errorList.conversionRateDate,
        conditionalError = validationErrors.conditionalErrorList.transactionCurrencySameAsSupplyContractCurrency['false'].conversionRateDate
      )}}

    </div>

    {{ govukInput({
      label: {
        text: "Risk Margin Fee %"
      },
      hint: {
        text: "The ongoing fee charged by the bank to the Supplier for the provision of the bond to the beneficiary. It excludes any arrangement, issuance or other up-front fees."
      },
      classes: "govuk-input--width-5",
      id: "riskMarginFee",
      name: "riskMarginFee",
      value: bond.riskMarginFee,
      attributes: {
        'data-cy': 'risk-margin-fee'
      },
      errorMessage: validationErrors.errorList.riskMarginFee and {
        text: validationErrors.errorList.riskMarginFee.text,
        attributes: {
          'data-cy': 'risk-margin-fee-error-message'
        }
      }
    }) }}          

    {{ govukInput({
      label: {
        text: "Covered Percentage"
      },
      hint: {
        text: "Percentage of UKEF cover requested by the bank. This can be any value up to 80%."
      },
      classes: "govuk-input--width-5",
      id: "coveredPercentage",
      name: "coveredPercentage",
      value: bond.coveredPercentage,
      attributes: {
        'data-cy': 'covered-percentage'
      },
      errorMessage: validationErrors.errorList.coveredPercentage and {
        text: validationErrors.errorList.coveredPercentage.text,
        attributes: {
          'data-cy': 'covered-percentage-error-message'
        }
      }
    }) }}

     {{ govukInput({
       inputmode: 'numeric',
        label: {
          text: "Minimum risk margin fee (optional)"
        },
        hint: {
          text: "The minimum fee payable in the currency of the bond, if any, by the supplier."
        },
        id: "minimumRiskMarginFee",
        name: "minimumRiskMarginFee",
        value: bond.minimumRiskMarginFee,
        classes: "govuk-input--width-5",
        attributes: {
          size: "60",
          maxlength: "255",
          placeholder: "0.00",
          'data-cy': 'minimum-risk-margin-fee'
        },
        errorMessage: validationErrors.errorList.minimumRiskMarginFee and {
          text: validationErrors.errorList.minimumRiskMarginFee.text,
          attributes: {
            'data-cy': 'minimum-risk-margin-fee-error-message'
          }
        }
      }) }}

    {{ govukInput({
      formGroup: {
        classes: "form-group-disabled"
      },
      label: {
        text: "Guarantee fee payable by bank"
      },
      hint: {
        text: "The fee to be paid by the bank to UKEF, which represents the Risk Margin Fee multiplied by the Covered Percentage, minus the 10% retained by the bank as an administrative fee. It is a calculated field. No input is required."
      },
      id: "guaranteeFeePayableByBank",
      name: "guaranteeFeePayableByBank",
      value: bond.guaranteeFeePayableByBank,
      classes: "form-group-disabled--input govuk-input--width-5",
      type: "number",
      attributes: {
        step: "0.0001",
        min: "0",
        max: "100",
        placeholder: "0",
        disabled: "true",
        'data-cy': "guarantee-fee-payable-by-bank"
      }
    }) }}

    {{ govukInput({
      formGroup: {
        classes: "form-group-disabled"
      },
      label: {
        text: "UKEF exposure"
      },
      hint: {
        text: "The amount of UKEF's exposure for this Transaction in the bond currency. It is the bond value multiplied by the Covered Percentage. It is a calculated field. No input is required."
      },
      id: "ukefExposure",
      name: "ukefExposure",
      value: bond.ukefExposure,
      classes: "form-group-disabled--input govuk-input--width-10",
      type: "text",
      attributes: {
        size: "60",
        maxlength: "255",
        placeholder: "0.00",
        disabled: "true",
        'data-cy': "ukef-exposure"
      }
    }) }}

    <button type="submit" class="govuk-button govuk-!-margin-right-1" data-module="govuk-button" data-cy="submit-button">Next page</button>

    <input
      type="submit"
      formaction="/contract/{{ dealId }}/bond/{{ bond._id }}/save-go-back"
      class="govuk-button govuk-button--secondary"
      data-module="govuk-button"
      value="Save and go back to deal"
      data-cy="save-go-back-button"
    />

  </form>

  <script type="text/javascript">
    function showAdditionalFields(bool) {
      var additionalFormFields = document.getElementById('additional-form-fields');

      if (bool) {
        additionalFormFields.className = '';
      } else {
        additionalFormFields.className = 'govuk-visually-hidden';
      }
    }
  
    /* UKEF Exposure calculation */
    var bondValueInput = document.getElementById('bondValue');
    var coveredPercentageInput = document.getElementById('coveredPercentage');
    var ukefExposure = document.getElementById('ukefExposure');

    function calculateUkefExposure() {
      var bondValue = bondValueInput.value.replace(/,/g, ''); // remove commas

      var calculation = bondValue * (coveredPercentageInput.value / 100);

      if (window.dtfs.isNumeric(calculation)) {
        var result;
        var totalDecimals = window.dtfs.decimalsCount(calculation);
        if (totalDecimals > 2)  {
          result = window.dtfs.roundNumber(calculation, 2);
        } else {
          result = calculation;
        }

        var formattedResult = result.toLocaleString('en', { minimumFractionDigits: 2 });

        ukefExposure.value = formattedResult;
      }
    }

    [bondValueInput, coveredPercentageInput].forEach(function(element) {
      element.addEventListener('blur', function(event) {
        calculateUkefExposure();
      });
    });

    /* Guarantee fee calculation */
    var riskMarginFeeInput = document.getElementById('riskMarginFee');
    var guaranteeFee = document.getElementById('guaranteeFeePayableByBank');

    function calculateGuaranteeFee() {
      var result = riskMarginFeeInput.value * 0.9;
      var formattedResult = result.toLocaleString('en', { minimumFractionDigits: 4 });
      guaranteeFee.value = formattedResult;
    }

    riskMarginFeeInput.addEventListener('blur', function(event) {
      calculateGuaranteeFee();
    });
  </script>

{% endblock %}
