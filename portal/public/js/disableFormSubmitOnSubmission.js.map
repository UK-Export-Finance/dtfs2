{"version":3,"file":"disableFormSubmitOnSubmission.js","mappings":"gBA4FyCA,MACvC,MAAMC,EAvFqBC,MAC3B,MAAMC,EAAQC,SAASC,iBAAiB,QAExC,IAAKF,EAAMG,OACT,OAAO,KAGT,MAAML,EAAWE,EAAMA,EAAMG,OAAS,GAEtC,OAAKL,GACI,IAGM,EA0EEC,GAEjB,IAAKD,EACH,OAGF,IAAIM,GAAe,EACfC,EAAiB,KACjBC,EAA4B,KAEhCR,EAASS,iBAAiB,UAAWC,IACnC,MAAM,UAAEC,GAAcD,EAEtB,KAAMC,aAAqBC,aACzB,OAKF,GAAIN,EAAc,CAChB,GAHgCK,IAAcJ,EAO5C,YADAM,OAAOC,kBAzFQC,EA4FDP,IA1FlBO,EAAgBC,SAmBEH,KACpBA,EAAOI,gBAAgB,YACvBJ,EAAOI,gBAAgB,gBAAgB,EAsEjCC,CAAaX,EAEjB,CA/FmBQ,MAWAF,KACrBA,EAAOM,aAAa,WAAY,IAChCN,EAAOM,aAAa,gBAAiB,OAAO,EAoF1CC,CAAcT,GACd,MAAMU,EAjEyBR,KACjC,IAAKA,EACH,MAAM,IAAIS,MAAM,wDAGlB,MAAMC,EAAcpB,SAASqB,cAAc,SAiB3C,OAfAD,EAAYJ,aAAa,KAAM,oCAC/BI,EAAYJ,aAAa,OAAQ,UAEjC,CAAU,SAAUM,SAASC,IAC3B,MAAMC,EAAQd,EAAOe,aAAaF,GAE9BC,GACFJ,EAAYJ,aAAaO,EAAWC,EACtC,IAGFJ,EAAYM,UAAUC,IAAI,mBAE1BjB,EAAOkB,MAAMR,GAENA,CAAW,EA2CWS,CAA0BrB,GAErDL,GAAe,EACfC,EAAiBI,EACjBH,EAA4Ba,CAAkB,GAC9C,EAGJtB,I","sources":["webpack://DTFS_PORTAL/../libs/common/src/ui-scripts/disable-form-submit-on-submission.js"],"sourcesContent":["/**\n * Gets the last form on the page if any forms are present.\n * The last form is taken as it is foreseeable to have multiple forms on a page,\n * and the submit button should always be in the last form on a page.\n * @returns {HTMLFormElement | null}\n */\nconst getLastFormIfPresent = () => {\n  const forms = document.querySelectorAll('form');\n\n  if (!forms.length) {\n    return null;\n  }\n\n  const lastForm = forms[forms.length - 1];\n\n  if (!lastForm) {\n    return null;\n  }\n\n  return lastForm;\n};\n\n/**\n * Deletes an element from the DOM\n * @param {HTMLElement} elementToDelete\n * @returns {void}\n */\nconst deleteElement = (elementToDelete) => {\n  if (elementToDelete) {\n    elementToDelete.remove();\n  }\n};\n\n/**\n * Disables a button\n * @param {HTMLButtonElement} button\n * @returns {void}\n */\nconst disableButton = (button) => {\n  button.setAttribute('disabled', '');\n  button.setAttribute('aria-disabled', 'true');\n};\n\n/**\n * Enables a button\n * @param {HTMLButtonElement} button\n * @returns {void}\n */\nconst enableButton = (button) => {\n  button.removeAttribute('disabled');\n  button.removeAttribute('aria-disabled');\n};\n\n/**\n * Creates a hidden input of the button used to submit the form.\n * This hidden input copies any name or value attributes that the submission button has,\n * as when we disable the initial button, the disabled button will not submit\n * this information to the server.\n * @param {HTMLButtonElement} button\n */\nconst createHiddenInputOfButton = (button) => {\n  if (!button) {\n    throw new Error('An error occurred when handling the form submission.');\n  }\n\n  const hiddenInput = document.createElement('input');\n\n  hiddenInput.setAttribute('id', 'resubmit-prevention-hidden-input');\n  hiddenInput.setAttribute('type', 'hidden');\n\n  [('name', 'value')].forEach((attribute) => {\n    const value = button.getAttribute(attribute);\n\n    if (value) {\n      hiddenInput.setAttribute(attribute, value);\n    }\n  });\n\n  hiddenInput.classList.add('js-hidden-input');\n\n  button.after(hiddenInput);\n\n  return hiddenInput;\n};\n\n/**\n * Adds an event listener to disable form resubmission using the same submitter.\n *\n * This intentionally does not disable all buttons on the form on submission, but can be updated to do so if\n * issues regarding double submissions are not resolved.\n * @returns {void}\n */\nconst addDisableFormSubmitOnSubmission = () => {\n  const lastForm = getLastFormIfPresent();\n\n  if (!lastForm) {\n    return;\n  }\n\n  let hasSubmitted = false;\n  let priorSubmitter = null;\n  let priorSubmitterHiddenField = null;\n\n  lastForm.addEventListener('submit', (event) => {\n    const { submitter } = event;\n\n    if (!(submitter instanceof HTMLElement)) {\n      return;\n    }\n\n    const isSameSubmitterAsPrevious = submitter === priorSubmitter;\n\n    if (hasSubmitted) {\n      if (isSameSubmitterAsPrevious) {\n        // if the disabled button has been submitted, prevents a duplicate resubmission\n        // ie from using keyboard navigation to submit the form\n        button.preventDefault();\n        return;\n      } else {\n        deleteElement(priorSubmitterHiddenField);\n        enableButton(priorSubmitter);\n      }\n    }\n\n    disableButton(submitter);\n    const hiddenInputElement = createHiddenInputOfButton(submitter);\n\n    hasSubmitted = true;\n    priorSubmitter = submitter;\n    priorSubmitterHiddenField = hiddenInputElement;\n  });\n};\n\naddDisableFormSubmitOnSubmission();\n"],"names":["addDisableFormSubmitOnSubmission","lastForm","getLastFormIfPresent","forms","document","querySelectorAll","length","hasSubmitted","priorSubmitter","priorSubmitterHiddenField","addEventListener","event","submitter","HTMLElement","button","preventDefault","elementToDelete","remove","removeAttribute","enableButton","setAttribute","disableButton","hiddenInputElement","Error","hiddenInput","createElement","forEach","attribute","value","getAttribute","classList","add","after","createHiddenInputOfButton"],"sourceRoot":""}