{"version":3,"file":"ukefexposure.js","mappings":"6CAKMA,EAAqBC,SAASC,eAAe,iBAC7CC,EAAyBF,SAASC,eAAe,qBACjDE,EAAoBH,SAASC,eAAe,gBAElD,SAASG,IACP,ICFMC,EDIAC,EAFQP,EAAmBQ,MAAMC,QAAQ,KAAM,KAExBN,EAAuBK,MAAQ,KAE5D,GCduB,SAACA,GACxB,QAAqB,iBAAVA,GAAsBA,IAAUE,OAAOF,KAAUE,OAAOC,SAASH,GAI9E,CDSMI,CAAUL,GAAc,CAC1B,IAAIM,EAGFA,ICVEP,EDQgCC,ECRhBO,WAAWC,MAAM,KAAK,IAEnCT,EAASU,OAEX,GDKe,ECFG,SAACR,EAAOS,GACjC,IAAIC,EAAgBV,EAChBW,EAAIF,EASR,OAPKA,IACHE,EAAI,GAGND,GAAaE,KAAAC,IAAI,GAAMF,GACvBD,EAAgBE,KAAKE,MAAMJ,GAC3BA,EAAaE,KAAAC,IAAI,GAAMF,EAEzB,CDTeI,CAAYhB,EAAa,GAEzBA,EAGX,IAAMiB,EAAkBX,EAAOY,eAAe,KAAM,CAAEC,sBAAuB,IAE7EtB,EAAkBI,MAAQgB,CAC5B,CACF,CAEIxB,GAAsBG,GACxB,CAACH,EAAoBG,GAAwBwB,SAAQ,SAACC,GACpDA,EAAQC,iBAAiB,QAAQ,WAC/BxB,GACF,GACF,K","sources":["webpack://DTFS_PORTAL/./scripts/ukef-exposure.js","webpack://DTFS_PORTAL/./scripts/number.js"],"sourcesContent":["import { isNumeric, decimalsCount, roundNumber } from './number';\n/*\n      calculate UKEF Exposure from Facility Value and Covered Percentage\n    */\n\nconst facilityValueInput = document.getElementById('facilityValue');\nconst coveredPercentageInput = document.getElementById('coveredPercentage');\nconst ukefExposureInput = document.getElementById('ukefExposure');\n\nfunction calculateUkefExposure() {\n  const value = facilityValueInput.value.replace(/,/g, ''); // remove commas\n\n  const calculation = value * (coveredPercentageInput.value / 100);\n\n  if (isNumeric(calculation)) {\n    let result;\n    const totalDecimals = decimalsCount(calculation);\n    if (totalDecimals > 2) {\n      result = roundNumber(calculation, 2);\n    } else {\n      result = calculation;\n    }\n\n    const formattedResult = result.toLocaleString('en', { minimumFractionDigits: 2 });\n\n    ukefExposureInput.value = formattedResult;\n  }\n}\n\nif (facilityValueInput && coveredPercentageInput) {\n  [facilityValueInput, coveredPercentageInput].forEach((element) => {\n    element.addEventListener('blur', () => {\n      calculateUkefExposure();\n    });\n  });\n}\n","export const isNumeric = (value) => {\n  if (typeof value === 'number' && value === Number(value) && Number.isFinite(value)) {\n    return true;\n  }\n  return false;\n};\n\nexport const decimalsCount = (numb) => {\n  const decimals = numb.toString().split('.')[1];\n  if (decimals) {\n    return decimals.length;\n  }\n  return 0;\n};\n\nexport const roundNumber = (value, digits) => {\n  let modifiedValue = value;\n  let d = digits;\n\n  if (!digits) {\n    d = 2;\n  }\n\n  modifiedValue *= 10 ** d;\n  modifiedValue = Math.round(modifiedValue);\n  modifiedValue /= 10 ** d;\n  return modifiedValue;\n};\n"],"names":["facilityValueInput","document","getElementById","coveredPercentageInput","ukefExposureInput","calculateUkefExposure","decimals","calculation","value","replace","Number","isFinite","isNumeric","result","toString","split","length","digits","modifiedValue","d","Math","pow","round","roundNumber","formattedResult","toLocaleString","minimumFractionDigits","forEach","element","addEventListener"],"sourceRoot":""}