{"version":3,"file":"disableFormSubmitOnSubmission.js","mappings":"yBAMA,MAgCMA,EAAiBC,IACrBA,EAAOC,aAAa,WAAY,IAChCD,EAAOC,aAAa,gBAAiB,OAAO,EA4DLC,MACvC,MAAMC,EA/FqBC,MAC3B,MAAMC,EAAQC,SAASC,iBAAiB,QAExC,IAAKF,EAAMG,OACT,OAAO,KAGT,MAAML,EAAWE,EAAMA,EAAMG,OAAS,GAEtC,OAAKL,GACI,IAGM,EAkFEC,GAEjB,IAAKD,EACH,OAGF,IAAIM,GAAe,EAEnBN,EAASO,iBAAiB,UAAWC,IACnC,MAAM,UAAEC,GAAcD,EAEhBC,aAAqBC,cAIvBD,EAAUE,UAAUC,SAAS,iBAxFLC,EAACL,EAAOF,KAClCA,GACFE,EAAMM,gBACR,EAsFID,CAAwBL,EAAOF,GAC/BA,GAAe,EArEHH,SAASC,iBAAiB,iBAClCW,SAASlB,IACfD,EAAcC,EAAO,KAsEnBD,EAAca,GAzDyBO,KAC3C,IAAKA,EACH,MAAM,IAAIC,MAAM,wDAElB,IAAKD,EAAqBE,aAAa,YACrC,OAGF,MACMC,EAAchB,SAASiB,cAAc,SAE3CD,EAAYrB,aAAa,OAAQ,UAHR,CAAC,OAAQ,SAKjBiB,SAASM,IACxB,MAAMC,EAAcN,EAAqBE,aAAaG,GAClDC,GACFH,EAAYrB,aAAauB,EAAWC,EACtC,IAGFN,EAAqBO,MAAMJ,EAAY,EAwCrCK,CAAoCf,GAAU,GAC9C,EAGJV,I","sources":["webpack://DTFS_GEF/../libs/common/src/ui-scripts/disable-form-submit-on-submission.js"],"sourcesContent":["/**\n * Gets the last form on the page if any forms are present.\n * The last form is taken as it is foreseeable to have multiple forms on a page,\n * and the submit button should always be in the last form on a page.\n * @returns {HTMLFormElement | null}\n */\nconst getLastFormIfPresent = () => {\n  const forms = document.querySelectorAll('form');\n\n  if (!forms.length) {\n    return null;\n  }\n\n  const lastForm = forms[forms.length - 1];\n\n  if (!lastForm) {\n    return null;\n  }\n\n  return lastForm;\n};\n\n/**\n * Prevents form resubmission by other methods other than clicking on buttons\n * (such as pressing enter on a form field or pressing enter on a button)\n * @param {SubmitEvent} event\n * @param {boolean} hasSubmitted\n */\nconst preventFormResubmission = (event, hasSubmitted) => {\n  if (hasSubmitted) {\n    event.preventDefault();\n  }\n};\n\n/**\n * Disables a button\n * @param {HTMLButtonElement} button\n */\nconst disableButton = (button) => {\n  button.setAttribute('disabled', '');\n  button.setAttribute('aria-disabled', 'true');\n};\n\n/**\n * Disables all govuk buttons on the page.\n * This is to prevent multiple form submissions by clicking on a submit button\n * more than once.\n */\nconst disableAllGovUkButtons = () => {\n  const buttons = document.querySelectorAll('.govuk-button');\n  buttons.forEach((button) => {\n    disableButton(button);\n  });\n};\n\n/**\n * Creates a hidden input of the button used to submit the form if required.\n * It is required if the button that was used to submit the form has been disabled.\n *\n * This hidden input copies any name or value attributes that the submission button has,\n * as when we disable the initial button, the disabled button will not submit\n * this information to the server.\n * @param {HTMLElement | null} buttonThatWasClicked\n */\nconst createHiddenInputOfButtonIfRequired = (buttonThatWasClicked) => {\n  if (!buttonThatWasClicked) {\n    throw new Error('An error occurred when handling the form submission.');\n  }\n  if (!buttonThatWasClicked.getAttribute('disabled')) {\n    return;\n  }\n\n  const attributesToCopy = ['name', 'value'];\n  const hiddenInput = document.createElement('input');\n\n  hiddenInput.setAttribute('type', 'hidden');\n\n  attributesToCopy.forEach((attribute) => {\n    const valueToCopy = buttonThatWasClicked.getAttribute(attribute);\n    if (valueToCopy) {\n      hiddenInput.setAttribute(attribute, valueToCopy);\n    }\n  });\n\n  buttonThatWasClicked.after(hiddenInput);\n};\n\n/**\n * Prevent multiple form submissions by pressing enter or clicking the submit button\n * The govukButton component has a preventDoubleClick property, but this only debounces in a one-second window,\n * and is therefore not sufficient for our needs as multiple forms take longer than a second to submit.\n *\n * If the submitter is a govuk-button, we disable all gov-uk buttons\n * This is both to allow us to disable form resubmission by methods other than clicking\n * and to help prevent any double submissions of forms on two different submission methods\n *\n * If the submitter is not a govuk-button, we only disable the button that was used for submission\n * to avoid double submissions. This is because these buttons should not be making data changes,\n * but for safety, we disable them anyway.\n */\nconst addDisableFormSubmitOnSubmission = () => {\n  const lastForm = getLastFormIfPresent();\n\n  if (!lastForm) {\n    return;\n  }\n\n  let hasSubmitted = false;\n\n  lastForm.addEventListener('submit', (event) => {\n    const { submitter } = event;\n\n    if (!(submitter instanceof HTMLElement)) {\n      return;\n    }\n\n    if (submitter.classList.contains('govuk-button')) {\n      preventFormResubmission(event, hasSubmitted);\n      hasSubmitted = true;\n      disableAllGovUkButtons();\n    } else {\n      disableButton(submitter);\n    }\n\n    createHiddenInputOfButtonIfRequired(submitter);\n  });\n};\n\naddDisableFormSubmitOnSubmission();\n"],"names":["disableButton","button","setAttribute","addDisableFormSubmitOnSubmission","lastForm","getLastFormIfPresent","forms","document","querySelectorAll","length","hasSubmitted","addEventListener","event","submitter","HTMLElement","classList","contains","preventFormResubmission","preventDefault","forEach","buttonThatWasClicked","Error","getAttribute","hiddenInput","createElement","attribute","valueToCopy","after","createHiddenInputOfButtonIfRequired"],"sourceRoot":""}