const crypto = require('node:crypto');
const { when } = require('jest-when');
const { CryptographicallyStrongGenerator } = require('./cryptographically-strong-generator');

jest.mock('node:crypto', () => ({
  randomBytes: jest.fn(),
}));

describe('CryptographicallyStrongGenerator', () => {
  let generator;

  beforeEach(() => {
    generator = new CryptographicallyStrongGenerator();
  });

  describe('randomBytes', () => {
    const numberOfBytes = 2;
    const hexStringOfTheRandomBytes = 'a1b2';
    const theRandomBytes = Buffer.from(hexStringOfTheRandomBytes, 'hex');

    it('returns the hex string of the bytes generated by crypto.randomBytes', () => {
      when(crypto.randomBytes).calledWith(numberOfBytes).mockReturnValueOnce(theRandomBytes);

      const randomHexString = generator.randomHexString(numberOfBytes);

      expect(randomHexString).toEqual(hexStringOfTheRandomBytes);
    });
  });

  describe('randomHexString', () => {
    const numberOfBytes = 2;
    const hexStringOfTheRandomBytes = 'a1b2';
    const theRandomBytes = Buffer.from(hexStringOfTheRandomBytes, 'hex');

    it('returns the hex string of the bytes generated by crypto.randomBytes', () => {
      when(crypto.randomBytes).calledWith(numberOfBytes).mockReturnValueOnce(theRandomBytes);

      const randomHexString = generator.randomHexString(numberOfBytes);

      expect(randomHexString).toEqual(hexStringOfTheRandomBytes);
    });
  });
});
