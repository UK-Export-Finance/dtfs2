name: Pipeline

on:
  push:
    branches: [ master ]
  schedule:
    # A weekly run to roll up any base image patches,
    # in office hours, avoiding bank holiday Mondays:
    # "At 12:00 on Tuesday." - https://crontab.guru/
    - cron: '0 12 * * 2'

jobs:

  portal:
    name: Test pipeline
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2-beta
      with:
        node-version: '12'
    - name: Run tests
      run: |
        npm run pipeline
    # - name: Run tests
    #   run: |
    #     HERE=$(pwd)
    #     export COMPANIES_HOUSE_API_KEY=${{ secrets.COMPANIES_HOUSE_API_KEY }}
    #     export AZURE_WORKFLOW_STORAGE_ACCOUNT=${{ secrets.AZURE_WORKFLOW_STORAGE_ACCOUNT }}
    #     export AZURE_WORKFLOW_STORAGE_ACCESS_KEY=${{ secrets.AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}
    #     export AZURE_WORKFLOW_FILESHARE_NAME=${{ secrets.AZURE_WORKFLOW_FILESHARE_NAME }}
    #     export AZURE_WORKFLOW_EXPORT_FOLDER=${{ secrets.AZURE_WORKFLOW_EXPORT_FOLDER }}
    #     export AZURE_WORKFLOW_IMPORT_FOLDER=${{ secrets.AZURE_WORKFLOW_IMPORT_FOLDER }}
        
    #     export AZURE_PORTAL_STORAGE_ACCOUNT=${{ secrets.AZURE_PORTAL_STORAGE_ACCOUNT }}
    #     export AZURE_PORTAL_STORAGE_ACCESS_KEY=${{ secrets.AZURE_PORTAL_STORAGE_ACCESS_KEY }}
    #     export AZURE_PORTAL_FILESHARE_NAME=${{ secrets.AZURE_PORTAL_FILESHARE_NAME }}
    #     export AZURE_PORTAL_EXPORT_FOLDER=${{ secrets.AZURE_PORTAL_EXPORT_FOLDER }}
        
    #     LOG="$HERE/pipeline.log"
        
    #     pipelinestart=`date +%s`
        
    #     start=`date +%s`
        
    #     cd "$HERE" && docker-compose up -d --build
    #     testResult=$?
        
    #     end=`date +%s`
        
    #     [ $testResult -eq 0 ] && echo "{\"stage\": \"pipeline:environment-startup\", \"duration\": \"$((end-start))\", \"result\": \"pass\"}" >> "$LOG" || echo "{\"stage\": \"pipeline:envirionment-startup\", \"duration\": \"$((end-start))\", \"result\": \"fail\"}" >> "$LOG"
    #     [ $testResult -ne 0 ] && exit $testResult
        
    #     start=`date +%s`
        
    #     echo "waiting 10 seconds to ensure mongo db has started before we run integration tests against it.."
    #     sleep 10
        
    #     end=`date +%s`
    #     echo "{\"stage\": \"pipeline:wait-for-mongo\", \"duration\": \"$((end-start))\", \"result\": \"pass\"}" >> "$LOG"
        
        
    #     start=`date +%s`
        
    #     docker exec deal-api /bin/sh ./bin/api-test.sh
    #     apiTestResults=$?
        
    #     end=`date +%s`
        
    #     [ $apiTestResults -eq 0 ] && echo "{\"stage\": \"pipeline:deal-api-integration-tests\", \"duration\": \"$((end-start))\", \"result\": \"pass\"}" >> "$LOG" || echo "{\"stage\": \"pipeline:deal-api-integration-tests\", \"duration\": \"$((end-start))\", \"result\": \"fail\"}" >> "$LOG"
    #     [ $apiTestResults -ne 0 ] && exit $apiTestResults
        
        
    #     start=`date +%s`
        
    #     cd "$HERE/utils/mock-data-loader" && node ./re-insert-mocks.js
    #     loadDataResult=$?
        
    #     end=`date +%s`
        
    #     [ $loadDataResult -eq 0 ] && echo "{\"stage\": \"pipeline:prepare-data\", \"duration\": \"$((end-start))\", \"result\": \"pass\"}" >> "$LOG" || echo "{\"stage\": \"pipeline:prepare-data\", \"duration\": \"$((end-start))\", \"result\": \"fail\"}" >> "$LOG"
    #     [ $loadDataResult -ne 0 ] && exit $loadDataResult
        
    #     start=`date +%s`
        
    #     cd "$HERE" && ./bin/updateDependencies.sh && ./bin/executeE2ETests.sh
    #     cypressResult=$?
        
    #     end=`date +%s`
        
    #     [ $cypressResult -eq 0 ] && echo "{\"stage\": \"pipeline:cypress\", \"duration\": \"$((end-start))\", \"result\": \"pass\"}" >> "$LOG" || echo "{\"stage\": \"pipeline:cypress\", \"duration\": \"$((end-start))\", \"result\": \"fail\"}" >> "$LOG"
        
    #     start=`date +%s`
    #     docker-compose down
    #     dockerDownResult=$?
    #     end=`date +%s`
    #     [ $dockerDownResult -eq 0 ] && echo "{\"stage\": \"pipeline:environment-shutdown\", \"duration\": \"$((end-start))\", \"result\": \"pass\"}" >> "$LOG" || echo "{\"stage\": \"pipeline:environment-shutdown\", \"duration\": \"$((end-start))\", \"result\": \"fail\"}" >> "$LOG"
        
    #     echo "{\"stage\": \"pipeline\", \"duration\": \"$((end-pipelinestart))\", \"result\": \"pass\"}" >> "$LOG"
    #     exit $cypressResult
        

