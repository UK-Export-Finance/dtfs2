# Release Workflow
# ****************
#
# This GitHub Actions workflow automates the release process for deploying web apps and Azure Functions to different environments.
# It is triggered by the completion of the Quality Assurance - Tests workflow and runs when there is a push to a release branch (matching the pattern `release-*` but excluding `release-please*`).
# The workflow handles the deployment of SQL migrations, web apps, and Azure functions sequentially.
#
# Key Stages:
# 1. Setup: Determines the appropriate environment based on the release branch and configures environment variables (e.g., timezone).
# 2. SQL schema migration: Deploys SQL migrations to the specified environment.
# 3. WebApp Deployment: Sequentially deploys a list of web apps defined in the matrix (`portal-ui`, `gef-ui`, etc.) to the target environment.
# 4. Function Deployment: Sequentially deploys a list of Azure functions (e.g., `acbs-function`) to the target environment.
#
# Key Points:
# - The workflow is triggered by the completion of the Quality Assurance - Tests workflow.
# - The deployment environment is determined dynamically based on the release branch (e.g. staging or prod).
# - Matrix strategies are used for deploying multiple web apps and functions iteratively.
# - Concurrency control is employed to ensure no simultaneous deployments for the same app/function.
# - Temporary deployment slots are used to ensure minimal downtime during deployments.
# - The workflow runs only if the preceding workflow (Quality Assurance - Tests) concludes successfully.
#
# Triggers: This workflow is triggered when the Quality Assurance - Tests workflow completes successfully for a release branch (`release-*`).
#
# Environment Variables:
# - `PRODUCT`: The product being deployed (e.g., `dtfs`).
# - `ENVIRONMENT`: The environment for deployment, dynamically set based on the release branch.
# - `TIMEZONE`: The timezone for deployment, passed via GitHub actions variables.
# - `FROM`: The base artifact to use for deployment (default is `latest`).

name: Release
run-name: üöÄ Deploying to ${{ github.event.workflow_run.head_branch }}

permissions:
  contents: read

on:
  workflow_run:
    workflows: ['Quality Assurance - Tests']
    types:
      - completed
    branches:
      - release-*
      - '!release-please*'

env:
  PRODUCT: dtfs
  ENVIRONMENT: ${{ github.event.workflow_run.head_branch }}
  TIMEZONE: ${{ vars.TIMEZONE }}
  # Base artifact
  FROM: latest

jobs:
  # 1. Base actions configrations
  setup:
    name: Setup üîß
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: [self-hosted, linux, deployment]
    outputs:
      product: ${{ env.PRODUCT }}
      environment: ${{ steps.environment.outputs.environment }}
      timezone: ${{ env.TIMEZONE }}

    steps:
      - name: Environment üß™
        id: environment
        run: |
          if [[ "${{ env.ENVIRONMENT }}" =~ ^release-.*-rc$ ]]; then
            echo "environment=prod" >> "$GITHUB_OUTPUT"
          elif [[ "${{ env.ENVIRONMENT }}" == *release* ]]; then
            echo "environment=staging" >> "$GITHUB_OUTPUT"
          else
            echo "environment=${{ github.event.workflow_run.head_branch }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Timezone üåê
        run: echo "Timezone set to ${{ env.TIMEZONE }}"

  # 2. Database schema migration
  database:
    name: MSSQL üóÑÔ∏è
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: [setup]
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: [self-hosted, DTFS, deployment]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}

    steps:
      - name: Repository üóÇÔ∏è
        uses: actions/checkout@v5

      - name: Deploy ‚ö°
        uses: ./.github/actions/mssql
        with:
          branch: ${{ github.event.workflow_run.head_branch }}
          host: ${{ secrets.SQL_DB_HOST }}
          port: ${{ secrets.SQL_DB_PORT }}
          username: ${{ secrets.SQL_DB_USERNAME }}
          password: ${{ secrets.SQL_DB_PASSWORD }}
          database: ${{ secrets.SQL_DB_NAME }}
          node: ${{ vars.NODE_VERSION }}
          log: ${{ vars.SQL_DB_LOGGING_ENABLED }}

  # 3. micro-serices WebApp deployments
  webapp:
    name: WebApp üåê
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: [setup, database]
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: [self-hosted, DTFS, deployment]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}

    strategy:
      max-parallel: 2
      # Do not cancel in-progress jobs upon failure
      fail-fast: false
      # Single dimension matrix
      matrix:
        webapp: ['portal-ui', 'gef-ui', 'trade-finance-manager-ui', 'portal-api', 'dtfs-central-api', 'external-api', 'trade-finance-manager-api']

    concurrency:
      group: deployment-webapp-${{ github.workflow }}-${{ github.workflow_ref }}-${{ matrix.webapp }}
      cancel-in-progress: true

    steps:
      - name: Repository üóÇÔ∏è
        uses: actions/checkout@v5

      - name: Deploy ‚ö°
        uses: ./.github/actions/webapp
        with:
          branch: ${{ github.event.workflow_run.head_branch }}
          region: ${{ vars.REGION }}
          group: ${{ secrets.RESOURCE_GROUP }}
          credentials: ${{ secrets.AZURE_CREDENTIALS }}
          acr: ${{ secrets.ACR_PASSWORD }}
          webapp: ${{ matrix.webapp }}

  # 4. micro-serices Functions deployments
  functions:
    name: Functions ‚ö°
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: [setup, database, webapp]
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: [self-hosted, DTFS, deployment]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}

    strategy:
      max-parallel: 2
      # Do not cancel in-progress jobs upon failure
      fail-fast: false
      # Single dimension matrix
      matrix:
        functions: ['acbs-function']

    concurrency:
      group: deployment-functions-${{ github.workflow }}-${{ github.workflow_ref }}-${{ matrix.functions }}
      cancel-in-progress: true

    steps:
      - name: Repository üóÇÔ∏è
        uses: actions/checkout@v5

      - name: Deploy ‚ö°
        uses: ./.github/actions/functions
        with:
          branch: ${{ github.event.workflow_run.head_branch }}
          region: ${{ vars.REGION }}
          group: ${{ secrets.RESOURCE_GROUP }}
          credentials: ${{ secrets.AZURE_CREDENTIALS }}
          acr: ${{ secrets.ACR_PASSWORD }}
          functions: ${{ matrix.functions }}

  # 5. Notification
  notify:
    name: Notification üîî
    needs: [setup]
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: [self-hosted, DTFS, deployment]

    steps:
      - name: Notification  üîî
        uses: ./.github/actions/notify
        with:
          webhook: ${{ secrets.MSTEAMS_WEBHOOK }}
          content: '
                      {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "00703c",
              "title": "üöÄ ${{ github.event.workflow_run.head_branch }} : ${{ env.ENVIRONMENT }}",
              "summary": "Deploying ${{ github.event.workflow_run.head_branch }} branch to ${{ env.ENVIRONMENT }} DTFS environment",
              "sections": [
                {
                  "activityTitle": "Release deployment",
                  "activitySubtitle": "Deploying **${{ github.event.workflow_run.head_branch }}** release branch to **${{ env.ENVIRONMENT }}** DTFS environment.",
                  "facts": [
                    {
                      "name": "Release",
                      "value": "${{ github.event.workflow_run.head_branch }}"
                    },
                    { "name": "Environment", "value": "${{ env.ENVIRONMENT }}" },
                    { "name": "Commit", "value": "${{ github.sha }}" },
                    { "name": "Status", "value": "Pending approval" }
                  ],
                  "markdown": true
                }
              ],
              "potentialAction": [
                {
                  "@type": "OpenUri",
                  "name": "Deployment",
                  "targets": [
                    {
                      "os": "default",
                      "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
            '
