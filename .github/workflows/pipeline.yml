name: Pipeline

on:
  push:
    branches: [ master ]
  schedule:
    # A weekly run to roll up any base image patches,
    # in office hours, avoiding bank holiday Mondays:
    # "At 12:00 on Tuesday." - https://crontab.guru/
    - cron: '0 12 * * 2'
    
env:
  TAG: latest

  COMPANIES_HOUSE_API_KEY: ${{ secrets.COMPANIES_HOUSE_API_KEY }}

  AZURE_WORKFLOW_STORAGE_ACCOUNT: ${{ secrets.AZURE_WORKFLOW_STORAGE_ACCOUNT }}
  AZURE_WORKFLOW_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}
  AZURE_WORKFLOW_FILESHARE_NAME: ${{ secrets.AZURE_WORKFLOW_FILESHARE_NAME }}
  AZURE_WORKFLOW_EXPORT_FOLDER: ${{ secrets.AZURE_WORKFLOW_EXPORT_FOLDER }}
  AZURE_WORKFLOW_IMPORT_FOLDER: ${{ secrets.AZURE_WORKFLOW_IMPORT_FOLDER }}

  AZURE_PORTAL_STORAGE_ACCOUNT: ${{ secrets.AZURE_PORTAL_STORAGE_ACCOUNT }}
  AZURE_PORTAL_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_PORTAL_STORAGE_ACCESS_KEY }}
  AZURE_PORTAL_FILESHARE_NAME: ${{ secrets.AZURE_PORTAL_FILESHARE_NAME }}
  AZURE_PORTAL_EXPORT_FOLDER: ${{ secrets.AZURE_PORTAL_EXPORT_FOLDER }}

jobs:

  portal-ui:
    name: Build and push Portal UI
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        registry: ${{ secrets.ACR_DEV_REGISTRY }}
        username: ${{ secrets.ACR_DEV_USERNAME }}
        password: ${{ secrets.ACR_DEV_PASSWORD }}
        repository: portal
        path: portal
        tags: ${{ env.TAG }}
        add_git_labels: true
        
  portal-api:
    name: Build and push Portal API
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        registry: ${{ secrets.ACR_DEV_REGISTRY }}
        username: ${{ secrets.ACR_DEV_USERNAME }}
        password: ${{ secrets.ACR_DEV_PASSWORD }}
        repository: deal-api
        path: deal-api
        tags: ${{ env.TAG }}
        add_git_labels: true

  portal-data:
    needs: portal-api
    name: Refresh Dev database
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Re-insert mocks
        run: |
          cd utils/mock-data-loader 
          mv .env.azure .env
          npm install
          node re-insert-mocks.js
  
  api-tests:
    needs: portal-api
    name: "Run API tests in Compose"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # Pull the latest images to run with so we don't need to build them
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_DEV_REGISTRY }}
        username: ${{ secrets.ACR_DEV_USERNAME }}
        password: ${{ secrets.ACR_DEV_PASSWORD }}
    - name: Pull portal-api
      run: |
        docker pull ${{ secrets.ACR_DEV_REGISTRY }}/deal-api:${{ env.TAG }}
        docker tag ${{ secrets.ACR_DEV_REGISTRY }}/deal-api:${{ env.TAG }} dtfs/deal-api
    - name: Pull portal
      run: |
        docker pull ${{ secrets.ACR_DEV_REGISTRY }}/portal:${{ env.TAG }}
        docker tag ${{ secrets.ACR_DEV_REGISTRY }}/portal:${{ env.TAG }} dtfs/portal
    - name: Start Docker Compose
      run: |
        source secrets/set_jwt_keypair.sh
        docker-compose up -d
        echo "waiting 10 seconds to ensure mongo db has started before we run integration tests against it.."
        sleep 10
    - name: Load mock data
      run: |
        cd utils/mock-data-loader
        npm install
        node ./re-insert-mocks.js
    - name: Run API tests
      run: |
        docker-compose exec -T deal-api npx jest --notify --coverage --verbose --config=api-test.jest.config.js --detectOpenHandles # --forceExit
    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#dtfs2-dev'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  end-to-end-tests:
    needs: [portal-ui, portal-api]
    name: "Run end-to-end tests in Compose"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # Pull the latest images to run with so we don't need to build them
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_DEV_REGISTRY }}
        username: ${{ secrets.ACR_DEV_USERNAME }}
        password: ${{ secrets.ACR_DEV_PASSWORD }}
    - name: Pull portal-api
      run: |
        docker pull ${{ secrets.ACR_DEV_REGISTRY }}/deal-api:${{ env.TAG }}
        docker tag ${{ secrets.ACR_DEV_REGISTRY }}/deal-api:${{ env.TAG }} dtfs/deal-api
    - name: Pull portal
      run: |
        docker pull ${{ secrets.ACR_DEV_REGISTRY }}/portal:${{ env.TAG }}
        docker tag ${{ secrets.ACR_DEV_REGISTRY }}/portal:${{ env.TAG }} dtfs/portal
    - name: Start Docker Compose
      run: |
        source secrets/set_jwt_keypair.sh
        docker-compose up -d
        echo "waiting 10 seconds to ensure mongo db has started before we run integration tests against it.."
        sleep 10
    - name: Load mock data
      run: |
        cd utils/mock-data-loader
        npm install
        node ./re-insert-mocks.js
        pwd
    - name: Run e2e tests
      env:
        CYPRESS_RECORD_KEY=${{ secrets.CYPRESS_RECORD_KEY }}
      run: |
        pwd
        cd $GITHUB_WORKSPACE
        npm install
        npx cypress run --spec "cypress/integration/**/*.spec.js" --record --config video=false
    - name: Save Cypress screenshots
      if: ${{ failure() }}
      uses: actions/upload-artifact@master
      with:
        name: screenshots
        path: './cypress/screenshots'
    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#dtfs2-dev'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  promote-portal:
    needs: [api-tests, end-to-end-tests]
    name: Promote Portal from Dev to Test
    runs-on: ubuntu-latest
    steps:
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_DEV_REGISTRY }}
        username: ${{ secrets.ACR_DEV_USERNAME }}
        password: ${{ secrets.ACR_DEV_PASSWORD }}
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_TEST_REGISTRY }}
        username: ${{ secrets.ACR_TEST_USERNAME }}
        password: ${{ secrets.ACR_TEST_PASSWORD }}
    - run: |
        docker pull ${{ secrets.ACR_DEV_REGISTRY }}/portal:${{ env.TAG }}
        docker tag ${{ secrets.ACR_DEV_REGISTRY }}/portal:${{ env.TAG }} ${{ secrets.ACR_TEST_REGISTRY }}/portal:${{ env.TAG }}
        docker push ${{ secrets.ACR_TEST_REGISTRY }}/portal:${{ env.TAG }}

  promote-portal-api:
    needs: [api-tests, end-to-end-tests]
    name: Promote Deal API from Dev to Test
    runs-on: ubuntu-latest
    steps:
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_DEV_REGISTRY }}
        username: ${{ secrets.ACR_DEV_USERNAME }}
        password: ${{ secrets.ACR_DEV_PASSWORD }}
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_TEST_REGISTRY }}
        username: ${{ secrets.ACR_TEST_USERNAME }}
        password: ${{ secrets.ACR_TEST_PASSWORD }}
    - run: |
        docker pull ${{ secrets.ACR_DEV_REGISTRY }}/deal-api:${{ env.TAG }}
        docker tag ${{ secrets.ACR_DEV_REGISTRY }}/deal-api:${{ env.TAG }} ${{ secrets.ACR_TEST_REGISTRY }}/deal-api:${{ env.TAG }}
        docker push ${{ secrets.ACR_TEST_REGISTRY }}/deal-api:${{ env.TAG }}
