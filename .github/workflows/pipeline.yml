name: Pipeline

on:
  push:
    branches: [ master ]
  schedule:
    # A weekly run to roll up any base image patches,
    # in office hours, avoiding bank holiday Mondays:
    # "At 12:00 on Tuesday." - https://crontab.guru/
    - cron: '0 12 * * 2'

env:
  environment: dev
  # Credentials for accessing Azure
  credentials: ${{ secrets.AZURE_DIGITAL_DEV }}
  resource_group: ${{ secrets.DEV_RESOURCE_GROUP }}
  # These values are used when running tests in Docker Compose
  COMPANIES_HOUSE_API_KEY: ${{ secrets.COMPANIES_HOUSE_API_KEY }}
  GOV_NOTIFY_EMAIL_RECIPIENT: ${{ secrets.GOV_NOTIFY_EMAIL_RECIPIENT }}
  DTFS_PORTAL_SCHEDULER: true
  FETCH_WORKFLOW_TYPE_B_SCHEDULE: "*/1 * * * * *"

jobs:

  portal-ui:
    name: Build and push Portal UI
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
      echo GITHUB_SHA=${{ env.GITHUB_SHA }}
    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        registry: ${{ secrets.DEV_ACR_REGISTRY }}
        username: ${{ secrets.DEV_ACR_USERNAME }}
        password: ${{ secrets.DEV_ACR_PASSWORD }}
        repository: portal-ui
        path: portal
        tags: latest
        build_args: GITHUB_SHA=${{ env.GITHUB_SHA }}
        add_git_labels: true

  portal-api:
    name: Build and push Portal API
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        echo GITHUB_SHA=${{ env.GITHUB_SHA }}
    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        registry: ${{ secrets.DEV_ACR_REGISTRY }}
        username: ${{ secrets.DEV_ACR_USERNAME }}
        password: ${{ secrets.DEV_ACR_PASSWORD }}
        repository: portal-api
        path: deal-api
        tags: latest
        build_args: GITHUB_SHA=${{ env.GITHUB_SHA }}
        add_git_labels: true

  api-tests:
    needs: portal-api
    name: "Run API tests in Compose"
    runs-on: ubuntu-latest
    env:
      AZURE_WORKFLOW_STORAGE_ACCOUNT: ${{ secrets.APITEST_AZURE_WORKFLOW_STORAGE_ACCOUNT }}
      AZURE_WORKFLOW_STORAGE_ACCESS_KEY: ${{ secrets.APITEST_AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}
      AZURE_WORKFLOW_FILESHARE_NAME: ${{ secrets.APITEST_AZURE_WORKFLOW_FILESHARE_NAME }}
      AZURE_WORKFLOW_EXPORT_FOLDER: ${{ secrets.APITEST_AZURE_WORKFLOW_EXPORT_FOLDER }}
      AZURE_WORKFLOW_IMPORT_FOLDER: ${{ secrets.APITEST_AZURE_WORKFLOW_IMPORT_FOLDER }}

      AZURE_PORTAL_STORAGE_ACCOUNT: ${{ secrets.APITEST_AZURE_PORTAL_STORAGE_ACCOUNT }}
      AZURE_PORTAL_STORAGE_ACCESS_KEY: ${{ secrets.APITEST_AZURE_PORTAL_STORAGE_ACCESS_KEY }}
      AZURE_PORTAL_FILESHARE_NAME: ${{ secrets.APITEST_AZURE_PORTAL_FILESHARE_NAME }}
      AZURE_PORTAL_EXPORT_FOLDER: ${{ secrets.APITEST_AZURE_PORTAL_EXPORT_FOLDER }}

      GOV_NOTIFY_API_KEY: ${{ secrets.APITEST_GOV_NOTIFY_API_KEY }}

    steps:
    - uses: actions/checkout@v2
    # Pull the latest images to run with so we don't need to build them
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DEV_ACR_REGISTRY }}
        username: ${{ secrets.DEV_ACR_USERNAME }}
        password: ${{ secrets.DEV_ACR_PASSWORD }}
    - name: Pull portal-api
      run: |
        docker pull ${{ secrets.DEV_ACR_REGISTRY }}/portal-api
        docker tag ${{ secrets.DEV_ACR_REGISTRY }}/portal-api dtfs/deal-api
    - name: Pull portal-ui
      run: |
        docker pull ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui
        docker tag ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui dtfs/portal
    - name: Start Docker Compose
      run: |
        source secrets/set_jwt_keypair.sh && docker-compose up -d
        echo "waiting 10 seconds to ensure mongo db has started before we run integration tests against it.."
        sleep 10
    - name: Load mock data
      run: |
        cd utils/mock-data-loader
        npm install
        node ./reset-id-counters.js
        node ./re-insert-mocks.js
    - name: Run API tests
      run: |
        docker-compose exec -T deal-api npx jest --notify --coverage --verbose --config=api-test.jest.config.js --detectOpenHandles # --forceExit
    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#dtfs2-dev'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  end-to-end-tests:
    needs: [portal-ui, portal-api]
    name: "Run end-to-end tests in Compose"
    runs-on: ubuntu-latest
    env:
      AZURE_WORKFLOW_STORAGE_ACCOUNT: ${{ secrets.E2ETEST_AZURE_WORKFLOW_STORAGE_ACCOUNT }}
      AZURE_WORKFLOW_STORAGE_ACCESS_KEY: ${{ secrets.E2ETEST_AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}
      AZURE_WORKFLOW_FILESHARE_NAME: ${{ secrets.E2ETEST_AZURE_WORKFLOW_FILESHARE_NAME }}
      AZURE_WORKFLOW_EXPORT_FOLDER: ${{ secrets.E2ETEST_AZURE_WORKFLOW_EXPORT_FOLDER }}
      AZURE_WORKFLOW_IMPORT_FOLDER: ${{ secrets.E2ETEST_AZURE_WORKFLOW_IMPORT_FOLDER }}

      AZURE_PORTAL_STORAGE_ACCOUNT: ${{ secrets.E2ETEST_AZURE_PORTAL_STORAGE_ACCOUNT }}
      AZURE_PORTAL_STORAGE_ACCESS_KEY: ${{ secrets.E2ETEST_AZURE_PORTAL_STORAGE_ACCESS_KEY }}
      AZURE_PORTAL_FILESHARE_NAME: ${{ secrets.E2ETEST_AZURE_PORTAL_FILESHARE_NAME }}
      AZURE_PORTAL_EXPORT_FOLDER: ${{ secrets.E2ETEST_AZURE_PORTAL_EXPORT_FOLDER }}

      GOV_NOTIFY_API_KEY: ${{ secrets.E2ETEST_GOV_NOTIFY_API_KEY }}
    steps:
    - uses: actions/checkout@v2
    # Pull the latest images to run with so we don't need to build them
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DEV_ACR_REGISTRY }}
        username: ${{ secrets.DEV_ACR_USERNAME }}
        password: ${{ secrets.DEV_ACR_PASSWORD }}
    - name: Pull portal-api
      run: |
        docker pull ${{ secrets.DEV_ACR_REGISTRY }}/portal-api
        docker tag ${{ secrets.DEV_ACR_REGISTRY }}/portal-api dtfs/deal-api
    - name: Pull portal
      run: |
        docker pull ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui
        docker tag ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui dtfs/portal
    - name: Start Docker Compose
      run: |
        source secrets/set_jwt_keypair.sh
        docker-compose up -d
        echo "waiting 10 seconds to ensure mongo db has started before we run integration tests against it.."
        sleep 10
    - name: Load mock data
      run: |
        cd utils/mock-data-loader
        npm install
        node ./reset-id-counters.js
        node ./re-insert-mocks.js
        pwd
    - name: Run e2e tests
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      run: |
        pwd
        cd $GITHUB_WORKSPACE
        npm install
        npx cypress run --spec "cypress/integration/**/*.spec.js" --config video=false # --record
    - name: Save Cypress screenshots
      if: ${{ failure() }}
      uses: actions/upload-artifact@main
      with:
        name: screenshots
        path: './cypress/screenshots'
    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#dtfs2-dev'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  promote:
    needs: [portal-ui, portal-api]
    #needs: [api-tests, end-to-end-tests] - temp promotion to unblock QA
    name: Promote Portal to Dev
    runs-on: ubuntu-latest
    steps:
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DEV_ACR_REGISTRY }}
        username: ${{ secrets.DEV_ACR_USERNAME }}
        password: ${{ secrets.DEV_ACR_PASSWORD }}
    - name: Tag images
      run: |
        from=latest
        to=dev
        docker pull ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui:$from
        docker tag ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui:$from ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui:$to
        docker push ${{ secrets.DEV_ACR_REGISTRY }}/portal-ui:$to
        docker pull ${{ secrets.DEV_ACR_REGISTRY }}/portal-api:$from
        docker tag ${{ secrets.DEV_ACR_REGISTRY }}/portal-api:$from ${{ secrets.DEV_ACR_REGISTRY }}/portal-api:$to
        docker push ${{ secrets.DEV_ACR_REGISTRY }}/portal-api:$to

  deploy:
    needs: promote
    # The App Service seems to need to be restarted to trigger a redeploy
    name: Deploy container images
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}
    - name: Restart Portal UI
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          portal_ui=tfs-${{ env.environment }}-portal-ui
          portal_api=tfs-${{ env.environment }}-portal-ui
          az webapp restart --name ${portal_ui} --resource-group ${{ env.resource_group }}
          az webapp restart --name ${portal_api} --resource-group ${{ env.resource_group }}

  refresh-data:
    needs: deploy
    name: Refresh Dev data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Re-insert mocks
        run: |
          cd utils/mock-data-loader
          cat .env.azure_dev > .env
          npm install
          echo Refreshing database using $(cat .env)
          node re-insert-mocks.js
