name: DTFS Central API

on:
  push:
    # Branch updates initiates deployment
    branches: [ main ]
    paths:
    - 'dtfs-central-api/**'
  schedule:
    # A weekly run to roll up any base image patches,
    # in office hours, avoiding bank holiday Mondays:
    # "At 12:00 on Tuesday." - https://crontab.guru/
    - cron: '0 12 * * 2'

env:
  environment: dev
  # Credentials for accessing Azure
  credentials: ${{ secrets.AZURE_DIGITAL_DEV }}

jobs:
  set-environment:
    name: Set Environment
    runs-on: [self-hosted, linux]
    outputs:
      environment: ${{ env.environment }}
    steps:
    - name: Initialise Environment
      run: |
        echo Setting environment to ${{ env.environment }}

  build:
    name: Build and push DTFS Central API
    runs-on: [self-hosted, linux]
    needs: set-environment
    environment:
      name: ${{ needs.set-environment.outputs.environment }}
    steps:
    - uses: actions/checkout@v2
    - name: Commit hash
      run: "echo GITHUB_SHA=${{ github.sha }}"
    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        registry: ${{ secrets.ACR_REGISTRY_DEV }}
        username: ${{ secrets.ACR_USERNAME_DEV }}
        password: ${{ secrets.ACR_PASSWORD_DEV }}
        repository: dtfs-central-api
        path: dtfs-central-api
        tags: latest
        build_args: GITHUB_SHA=${{ github.sha }}
        add_git_labels: true

  test:
    name: "Run API tests in Compose"
    needs: [set-environment, build]
    environment:
      name: APITEST
    runs-on: [self-hosted, linux]
    env:
      MULESOFT_API_KEY: ${{ secrets.MULESOFT_API_KEY }}
      MULESOFT_API_SECRET: ${{ secrets.MULESOFT_API_SECRET }}
      MULESOFT_API_NUMBER_GENERATOR_URL: ${{ secrets.MULESOFT_API_NUMBER_GENERATOR_URL }}
      MULESOFT_API_ACBS_DEAL_URL: ${{ secrets.MULESOFT_API_ACBS_DEAL_URL }}
      MULESOFT_API_ACBS_FACILITY_URL: ${{ secrets.MULESOFT_API_ACBS_FACILITY_URL }}
      MULESOFT_API_PARTY_DB_KEY: ${{ secrets.MULESOFT_API_PARTY_DB_KEY }}
      MULESOFT_API_PARTY_DB_SECRET: ${{ secrets.MULESOFT_API_PARTY_DB_SECRET }}
      MULESOFT_API_PARTY_DB_URL: ${{ secrets.MULESOFT_API_PARTY_DB_URL }}
      MULESOFT_API_CURRENCY_EXCHANGE_RATE_URL: ${{ secrets.MULESOFT_API_CURRENCY_EXCHANGE_RATE_URL }}
      MULESOFT_API_CURRENCY_EXCHANGE_RATE_KEY: ${{ secrets.MULESOFT_API_CURRENCY_EXCHANGE_RATE_KEY }}
      MULESOFT_API_CURRENCY_EXCHANGE_RATE_SECRET: ${{ secrets.MULESOFT_API_CURRENCY_EXCHANGE_RATE_SECRET }}
      MULESOFT_API_EXPOSURE_PERIOD_URL: ${{ secrets.MULESOFT_API_EXPOSURE_PERIOD_URL }}

      UKEF_TFM_API_SYSTEM_KEY: ${{ secrets.UKEF_TFM_API_SYSTEM_KEY }}
      UKEF_TFM_API_REPORTS_KEY: ${{ secrets.UKEF_TFM_API_REPORTS_KEY }}

    steps:
    - uses: actions/checkout@v2
    # Pull the latest images to run with so we don't need to build them
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY_DEV }}
        username: ${{ secrets.ACR_USERNAME_DEV }}
        password: ${{ secrets.ACR_PASSWORD_DEV }}
    - name: Pull dtfs-central-api
      run: |
        docker pull ${{ secrets.ACR_REGISTRY_DEV }}/dtfs-central-api
        docker tag ${{ secrets.ACR_REGISTRY_DEV }}/dtfs-central-api dtfs/dtfs-central-api
    - name: Start Docker Compose
      run: |
        docker-compose -f docker-compose.gha.yml up -d dtfs-central-api
    - name: Run API tests
      run: |
        docker-compose exec -T dtfs-central-api npm run api-test
    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#dtfs-github-actions'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  promote:
    name: Promote container images to Dev
    needs: [set-environment, test]
    environment:
      name: ${{ needs.set-environment.outputs.environment }}
    runs-on: [self-hosted, linux]
    steps:
    - name: Log in to Dev container registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY_DEV }}
        username: ${{ secrets.ACR_USERNAME_DEV }}
        password: ${{ secrets.ACR_PASSWORD_DEV }}
    - name: Tag images
      run: |
        from=latest
        to=dev
        docker pull ${{ secrets.ACR_REGISTRY_DEV }}/dtfs-central-api:$from
        docker tag ${{ secrets.ACR_REGISTRY_DEV }}/dtfs-central-api:$from ${{ secrets.ACR_REGISTRY_DEV }}/dtfs-central-api:$to
        docker push ${{ secrets.ACR_REGISTRY_DEV }}/dtfs-central-api:$to

  deploy:
    name: Deploy container images to Dev
    needs: [set-environment, promote]
    environment:
      name: ${{ needs.set-environment.outputs.environment }}
    runs-on: [self-hosted, linux]
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ secrets.RESOURCE_GROUP }}

    - name: Create slot ${{ github.sha }}
      uses: azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment slot create --name tfs-${{ env.environment }}-dtfs-central-api --slot ${{ github.sha }} --configuration-source tfs-${{ env.environment }}-dtfs-central-api

    - name: Swap slot ${{ github.sha }} into production
      uses: azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment slot swap   --name tfs-${{ env.environment }}-dtfs-central-api --slot ${{ github.sha }} --action swap

    - name: Delete slot ${{ github.sha }}
      # Clean up the slot regardless of errors
      if: ${{ always() }}
      uses: azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment slot delete --name tfs-${{ env.environment }}-dtfs-central-api --slot ${{ github.sha }}