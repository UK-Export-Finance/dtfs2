parameters:
- name: label
  type: string
  default: ""
- name: name
  type: string
  default: ""
- name: environment
  type: string
  default: ""
- name: needs
  type: object
  default: []
- name: credentials
  type: string
  default: ""
- name: resource_group
  type: string
  default: ""
- name: app_service_plan
  type: string
  default: ""
- name: SESSION_SECRET
  type: string
  default: ""

jobs:
- job: ${{ parameters.name }}
  name: ${{ parameters.label }}-ui
  needs: ${{ parameters.needs }}
  runs-on: ubuntu-latest
  steps:
  - uses: azure/login@v1
    with:
      creds: ${{ parameters.credentials }}

  - name: Defaults
    uses: Azure/cli@v1.0.0
    with:
      inlineScript: |
        az configure --defaults location=uksouth
        az configure --defaults group=${{ parameters.resource_group }}

  - name: Create
    uses: Azure/cli@v1.0.0
    with:
      inlineScript: |
        az webapp create --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --plan ${{ parameters.app_service_plan }} \
          --deployment-container-image-name ${{ parameters.registry }}/${{ parameters.name }}-ui:${{ parameters.environment }}

  - name: Vnet integration
    uses: Azure/cli@v1.0.0
    with:
      # Enable outbound traffic to the private-endpoints subnet so we can access TFM API and Redis
      inlineScript: |
        az webapp vnet-integration add --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --vnet tfs-${{ parameters.app_service_plan }}-vnet \
          --subnet ${{ parameters.app_service_plan }}-app-service-plan-egress

  - name: Private endpoint
    uses: Azure/cli@v1.0.0
    with:
      # Restrict inbound traffic to not be open to the Internet
      # NB: group-id isn't well documented. It means "Target sub-resource"
      #     The purpose of connection-name is unknown.
      inlineScript: |
        tfm_ui_id=$(az webapp show --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui --query "id" -o tsv)
        az network private-endpoint create \
          --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --vnet-name tfs-${{ parameters.app_service_plan }}-vnet \
          --subnet ${{ parameters.environment }}-private-endpoints \
          --private-connection-resource-id "$tfm_ui_id" \
          --group-id sites \
          --connection-name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui

  - name: DNS A-records
    uses: Azure/cli@v1.0.0
    with:
      # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
      # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
      inlineScript: |
        ipv4_address=$(az network private-dns record-set a show --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

        interface_id=$(az network private-endpoint show --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui --query 'networkInterfaces[0].id' -o tsv)
        interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
        
        # Create
        if [ -z "$ipv4_address" ]
        then
          echo Setting private link IP address...

          az network private-dns record-set a create --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui --zone-name "privatelink.azurewebsites.net"
          az network private-dns record-set a add-record \
            --record-set-name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
            --zone-name "privatelink.azurewebsites.net" \
            --ipv4-address $interface_ip
          
          az network private-dns record-set a create --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui.scm --zone-name "privatelink.azurewebsites.net"
          az network private-dns record-set a add-record \
            --record-set-name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui.scm \
            --zone-name "privatelink.azurewebsites.net" \
            --ipv4-address $interface_ip
        fi

        # Update
        if [ "$ipv4_address" != "$interface_ip" ]
        then
          echo Updating private link IP address...

          az network private-dns record-set a delete --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui --zone-name "privatelink.azurewebsites.net" --yes
          az network private-dns record-set a create --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui --zone-name "privatelink.azurewebsites.net"
          az network private-dns record-set a add-record \
            --record-set-name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
            --zone-name "privatelink.azurewebsites.net" \
            --ipv4-address $interface_ip

          az network private-dns record-set a delete --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui.scm --zone-name "privatelink.azurewebsites.net" --yes
          az network private-dns record-set a create --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui.scm --zone-name "privatelink.azurewebsites.net"
          az network private-dns record-set a add-record \
            --record-set-name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui.scm \
            --zone-name "privatelink.azurewebsites.net" \
            --ipv4-address $interface_ip
        fi

  - name: Continuous deployment
    uses: Azure/cli@v1.0.0
    with:
      inlineScript: |
        az webapp deployment container config --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --enable-cd true

  - name: Enable container logging
    uses: Azure/cli@v1.0.0
    with:
      inlineScript: |
        az webapp log config --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --docker-container-logging filesystem

  - name: Always-on
    uses: Azure/cli@v1.0.0
    with:
      inlineScript: |
        az webapp config set --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --always-on true

  - name: Environment variables
    uses: Azure/cli@v1.0.0
    with:
      # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
      # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
      # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
      inlineScript: |        
        redis_hostname=$(az redis show --name tfs-${{ parameters.environment }}-redis --query hostName --output tsv)
        redis_sslPort=$(az redis show --name tfs-${{ parameters.environment }}-redis --query sslPort --output tsv)
        redis_key=$(az redis list-keys --name tfs-${{ parameters.environment }}-redis --query primaryKey --output tsv)
        echo "REDIS CONNECTION: $redis_key@$redis_hostname:$redis_sslPort"

        az webapp config appsettings set --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --settings \
            PORT=5000 \
            WEBSITES_PORT=5000 \
            WEBSITE_DNS_SERVER="168.63.129.16" \
            WEBSITE_VNET_ROUTE_ALL=1 \
            REDIS_HOSTNAME="$redis_hostname" \
            REDIS_PORT="$redis_sslPort" \
            REDIS_KEY="$redis_key" \

  - name: Secrets
    uses: Azure/cli@v1.0.0
    with:
      inlineScript: |
        az webapp config connection-string set --name tfs-${{ parameters.environment }}-${{ parameters.name }}-ui \
          --connection-string-type custom \
          --settings \
            SESSION_SECRET="${{ parameters.SESSION_SECRET }}"
