name: Test environment infrastructure

on:
  push:
    branches: [ test ]

env:
  # Environment
  environment: test
  credentials: ${{ secrets.AZURE_DIGITAL_TEST }}
  resource_group: ${{ secrets.TEST_RESOURCE_GROUP }}
  app_service_plan: test
  redis_sku: Basic
  # Container registry
  registry: ${{ secrets.TEST_ACR_REGISTRY }}
  # App service settings
  DEAL_API_URL: "https://tfs-test-portal-api.azurewebsites.net"
  COMPANIES_HOUSE_API_URL: ="https://api.companieshouse.gov.uk"
  # App service secrets
  SESSION_SECRET: "${{ secrets.TEST_SESSION_SECRET }}"
  COMPANIES_HOUSE_API_KEY: "${{ secrets.COMPANIES_HOUSE_API_KEY }}"
  AZURE_PORTAL_STORAGE_ACCOUNT: "${{ secrets.TEST_AZURE_PORTAL_STORAGE_ACCOUNT }}"
  AZURE_PORTAL_STORAGE_ACCESS_KEY: "${{ secrets.TEST_AZURE_PORTAL_STORAGE_ACCESS_KEY }}"
  AZURE_PORTAL_FILESHARE_NAME: "${{ secrets.TEST_AZURE_PORTAL_FILESHARE_NAME }}"
  AZURE_PORTAL_EXPORT_FOLDER: "${{ secrets.TEST_AZURE_PORTAL_EXPORT_FOLDER }}"
  AZURE_WORKFLOW_STORAGE_ACCOUNT: "${{ secrets.TEST_AZURE_WORKFLOW_STORAGE_ACCOUNT }}"
  AZURE_WORKFLOW_STORAGE_ACCESS_KEY: "${{ secrets.TEST_AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}"
  AZURE_WORKFLOW_FILESHARE_NAME: "${{ secrets.TEST_AZURE_WORKFLOW_FILESHARE_NAME }}"
  AZURE_WORKFLOW_EXPORT_FOLDER: "${{ secrets.TEST_AZURE_WORKFLOW_EXPORT_FOLDER }}"
  AZURE_WORKFLOW_IMPORT_FOLDER: "${{ secrets.TEST_AZURE_WORKFLOW_IMPORT_FOLDER }}"
  MONGO_INITDB_DATABASE: "${{ secrets.MONGO_INITDB_DATABASE }}"
  MONGODB_URI: "${{ secrets.TEST_MONGODB_URI }}"
  REDIS_URI: "${{ secrets.TEST_REDIS_URI }}"
  JWT_SIGNING_KEY: "${{ secrets.DEV_JWT_SIGNING_KEY }}"
  JWT_VALIDATING_KEY: "${{ secrets.DEV_JWT_VALIDATING_KEY }}"
  GOV_NOTIFY_API_KEY: ="${{ secrets.TEST_GOV_NOTIFY_API_KEY }}"
  GOV_NOTIFY_EMAIL_RECIPIENT: "${{ secrets.GOV_NOTIFY_EMAIL_RECIPIENT }}"

  DTFS_PORTAL_SCHEDULER: true
  FETCH_WORKFLOW_TYPE_B_SCHEDULE: "* * * * *"

# Below this line should be the same for all environments

jobs:

  networking:
    name: Network and security group
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Networking
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          # Network security group
          az network nsg create --name tfs-${{ env.environment }}-portal-nsg
          az network nsg rule create --name front-door-allow \
            --description "Allow traffic from Front Door." \
            --nsg-name tfs-${{ env.environment }}-portal-nsg \
            --priority 100 \
            --access Allow \
            --source-address-prefixes AzureFrontDoor.Backend \
            --protocol Tcp
          az network nsg rule create --name internet-deny \
            --description "Deny all Internet traffic." \
            --nsg-name tfs-${{ env.environment }}-portal-nsg \
            --priority 200 \
            --access Deny \
            --source-address-prefixes Internet \
            --protocol "*"

          # Vnet
          # We have to do a show here or we get an error on create if the vnet exists:
          az network vnet show --name tfs-${{ env.environment }}-portal-vnet || \
          az network vnet create --name tfs-${{ env.environment }}-portal-vnet \
            --network-security-group tfs-${{ env.environment }}-portal-nsg
          # Microsoft.Web/serverFarms allows App Service to use this vnet
          az network vnet subnet create --name portal \
            --address-prefixes 10.0.0.0/28 \
            --vnet-name tfs-${{ env.environment }}-portal-vnet \
            --delegations Microsoft.Web/serverFarms

  portal-ui:
    name: Portal UI
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-portal-ui \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/portal-ui:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-portal-ui \
            --vnet tfs-${{ env.environment }}-portal-vnet \
            --subnet portal

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-portal-ui \
            --always-on true

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-portal-ui \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-portal-ui \
            --docker-container-logging filesystem

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
          az webapp config appsettings set --name tfs-${{ env.environment }}-portal-ui \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000 \
              DEAL_API_URL="${{ env.DEAL_API_URL }}" \
              COMPANIES_HOUSE_API_URL="${{ env.COMPANIES_HOUSE_API_URL }}"

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config connection-string set --name tfs-${{ env.environment }}-portal-ui \
            --connection-string-type custom \
            --settings \
              SESSION_SECRET="${{ env.SESSION_SECRET }}" \
              REDIS_URI="${{ env.REDIS_URI }}" \
              COMPANIES_HOUSE_API_KEY="${{ env.COMPANIES_HOUSE_API_KEY }}"

  portal-api:
    name: Portal API
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-portal-api \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/portal-api:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-portal-ui \
            --vnet tfs-${{ env.environment }}-portal-vnet \
            --subnet portal

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-portal-api \
            --always-on true

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-portal-api \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-portal-api \
            --docker-container-logging filesystem

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
          az webapp config appsettings set --name tfs-${{ env.environment }}-portal-api \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config connection-string set --name tfs-${{ env.environment }}-portal-api \
            --connection-string-type custom \
            --settings \
              AZURE_PORTAL_EXPORT_FOLDER="${{ env.AZURE_PORTAL_EXPORT_FOLDER }}" \
              AZURE_PORTAL_FILESHARE_NAME="${{ env.AZURE_PORTAL_FILESHARE_NAME }}" \
              AZURE_PORTAL_STORAGE_ACCESS_KEY="${{ env.AZURE_PORTAL_STORAGE_ACCESS_KEY }}" \
              AZURE_PORTAL_STORAGE_ACCOUNT="${{ env.AZURE_PORTAL_STORAGE_ACCOUNT }}" \
              AZURE_WORKFLOW_EXPORT_FOLDER="${{ env.AZURE_WORKFLOW_EXPORT_FOLDER }}" \
              AZURE_WORKFLOW_FILESHARE_NAME="${{ env.AZURE_WORKFLOW_FILESHARE_NAME }}" \
              AZURE_WORKFLOW_IMPORT_FOLDER="${{ env.AZURE_WORKFLOW_IMPORT_FOLDER }}" \
              AZURE_WORKFLOW_STORAGE_ACCOUNT="${{ env.AZURE_WORKFLOW_STORAGE_ACCOUNT }}" \
              AZURE_WORKFLOW_STORAGE_ACCESS_KEY="${{ env.AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}" \
              MONGO_INITDB_DATABASE="${{ env.MONGO_INITDB_DATABASE }}" \
              MONGODB_URI="${{ env.MONGODB_URI }}" \
              JWT_SIGNING_KEY="${{ env.JWT_SIGNING_KEY }}" \
              JWT_VALIDATING_KEY="${{ env.JWT_VALIDATING_KEY }}" \
              GOV_NOTIFY_API_KEY="${{ env.GOV_NOTIFY_API_KEY }}" \
              GOV_NOTIFY_EMAIL_RECIPIENT="${{ env.GOV_NOTIFY_EMAIL_RECIPIENT }}"

  cosmos-db:
    name: Mongo DB
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Cosmos account for mongodb
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az cosmosdb create --name tfs-${{ env.environment }}-mongo --kind MongoDB --server-version 3.6

    - name: Database with autoscale
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az cosmosdb mongodb database create --account tfs-${{ env.environment }}-mongo --name test --max-throughput 4000

    - name: Collections
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name deals --idx '[{"key": {"keys": ["details.dateOfLastAction"]}}, {"key": {"keys": ["_id"]}}]'
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name banks
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name eligibilityCriteria
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name mandatoryCriteria
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name currencies
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name users
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name industrySectors
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name idCounters
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name test --shard "_id" --name countries

  front-door:
    # NB Front Door takes a little while to be available
    # So you won't get a successful request for the first few minutes.
    name: WAF/DDoS
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

          # Front door requires an extension to the az cli:
          az extension add --name front-door

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        # NB we seem to get a lot of traffic to app service from FD, so reducing probes to 60s from 30s
        inlineScript: |
          az network front-door create --name tfs-${{ env.environment }}-fd \
            --accepted-protocols Https \
            --forwarding-protocol HttpsOnly \
            --backend-address tfs-${{ env.environment }}-portal-ui.azurewebsites.net \
            --probeMethod GET \
            --protocol Https \
            --interval 60 \
            --path "/healthcheck"

    - name: Redirect to https
      uses: Azure/cli@v1.0.0
      with:
        # NB "DefaultFrontendEndpoint" is the name assigned by the command above.
        # If this changes, use "az network front-door show --name tfs-???-fd | grep FrontendEndpoints"
        inlineScript: |
          az network front-door routing-rule create --name RedirectToHttps \
            --front-door-name tfs-${{ env.environment }}-fd \
            --frontend-endpoints DefaultFrontendEndpoint \
            --route-type Redirect \
            --accepted-protocols Http \
            --redirect-protocol HttpsOnly

  file-storage:
    name: File storage
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az storage account create --name tfs${{ env.environment }}storage \
            --sku Standard_ZRS \
            --https-only true \
            --encryption-services file

    - name: File share
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az storage share create --account-name tfs${{ env.environment }}storage \
            --name files

    - name: File share (workflow)
      uses: Azure/cli@v1.0.0
      with:
        # This fileshare is used if the environment isn't integrated to Workflow
        inlineScript: |
          az storage share create --account-name tfs${{ env.environment }}storage \
            --name workflow

  session-store:
    name: Redis session store
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az redis create --name tfs-${{ env.environment }}-redis \
            --sku ${{ env.redis_sku }} \
            --vm-size C0
