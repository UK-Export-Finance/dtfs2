name: Production environment infrastructure

on:
  push:
    branches: [ prod ]

env:
  # Environment
  environment: prod
  credentials: ${{ secrets.AZURE_DIGITAL_PROD }}
  resource_group: ${{ secrets.PROD_RESOURCE_GROUP }}
  app_service_plan: prod
  redis_sku: Basic
  database_name: tfs-portal
  protected_database: true
  # Container registry
  registry: ${{ secrets.PROD_ACR_REGISTRY }}
  # App service settings
  DEAL_API_URL: "https://tfs-prod-portal-api.azurewebsites.net"
  COMPANIES_HOUSE_API_URL: ="https://api.companieshouse.gov.uk"
  # App service secrets
  SESSION_SECRET: "${{ secrets.PROD_SESSION_SECRET }}"
  COMPANIES_HOUSE_API_KEY: "${{ secrets.COMPANIES_HOUSE_API_KEY }}"
  AZURE_PORTAL_STORAGE_ACCOUNT: "${{ secrets.PROD_AZURE_PORTAL_STORAGE_ACCOUNT }}"
  AZURE_PORTAL_STORAGE_ACCESS_KEY: "${{ secrets.PROD_AZURE_PORTAL_STORAGE_ACCESS_KEY }}"
  AZURE_PORTAL_FILESHARE_NAME: "${{ secrets.PROD_AZURE_PORTAL_FILESHARE_NAME }}"
  AZURE_PORTAL_EXPORT_FOLDER: "${{ secrets.PROD_AZURE_PORTAL_EXPORT_FOLDER }}"
  AZURE_WORKFLOW_STORAGE_ACCOUNT: "${{ secrets.PROD_AZURE_WORKFLOW_STORAGE_ACCOUNT }}"
  AZURE_WORKFLOW_STORAGE_ACCESS_KEY: "${{ secrets.PROD_AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}"
  AZURE_WORKFLOW_FILESHARE_NAME: "${{ secrets.PROD_AZURE_WORKFLOW_FILESHARE_NAME }}"
  AZURE_WORKFLOW_EXPORT_FOLDER: "${{ secrets.PROD_AZURE_WORKFLOW_EXPORT_FOLDER }}"
  AZURE_WORKFLOW_IMPORT_FOLDER: "${{ secrets.PROD_AZURE_WORKFLOW_IMPORT_FOLDER }}"
  MONGODB_URI: "${{ secrets.PROD_MONGODB_URI }}"
  REDIS_URI: "${{ secrets.PROD_REDIS_URI }}"
  JWT_SIGNING_KEY: "${{ secrets.PROD_JWT_SIGNING_KEY }}"
  JWT_VALIDATING_KEY: "${{ secrets.PROD_JWT_VALIDATING_KEY }}"
  GOV_NOTIFY_API_KEY: ="${{ secrets.PROD_GOV_NOTIFY_API_KEY }}"
  GOV_NOTIFY_EMAIL_RECIPIENT: "${{ secrets.GOV_NOTIFY_EMAIL_RECIPIENT }}"

  DTFS_PORTAL_SCHEDULER: false
  FETCH_WORKFLOW_TYPE_B_SCHEDULE: "* * * * *"

# Below this line should be the same for all environments

jobs:

  portal-api-vnet:
    # NB Only one vnet can be associated per App Service Plan,
    # therefore all App Services on a plan must share a single vnet.
    # So we name the vnet after the app service plan, rather than the environment.
    name: Portal API vnet
    runs-on: ubuntu-latest
    steps:

    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Vnet
      uses: Azure/cli@v1.0.0
      with:
        # We have to do a show here or we get an error on create if the vnet already exists:
        inlineScript: |
          az network vnet show --name tfs-${{ env.app_service_plan }}-portal-api || \
          az network vnet create --name tfs-${{ env.app_service_plan }}-portal-api

    - name: Subnet
      uses: Azure/cli@v1.0.0
      with:
        # Delegation Microsoft.Web/serverFarms allows App Service to call into this vnet
        inlineScript: |
          az network vnet subnet create \
            --name backing-services \
            --vnet-name tfs-${{ env.app_service_plan }}-portal-api \
            --delegations Microsoft.Web/serverFarms \
            --address-prefixes 10.0.0.0/28

    - name: Service endpoints
      uses: Azure/cli@v1.0.0
      with:
        # Service endpoints allow the selected backing services to be accessed through this subnet
        inlineScript: |
          az network vnet subnet update --name backing-services --vnet-name tfs-${{ env.app_service_plan }}-portal-api \
            --service-endpoints Microsoft.AzureCosmosDB Microsoft.Storage 
            # We may add: Microsoft.web Microsoft.KeyVault

  portal-ui:
    name: Portal UI
    runs-on: ubuntu-latest
    # Delaying to avoid clashing with container image promotion
    needs: [portal-api-vnet, cosmos-db]
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-portal-ui \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/portal-ui:${{ env.environment }}

    # - name: Vnet integration
    #   uses: Azure/cli@v1.0.0
    #   with:
    #     inlineScript: |
    #       az webapp vnet-integration add --name tfs-${{ env.environment }}-portal-ui \
    #         --vnet tfs-${{ env.app_service_plan }}-portal-vnet \
    #         --subnet portal

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-portal-ui \
            --always-on true

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-portal-ui \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-portal-ui \
            --docker-container-logging filesystem

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        inlineScript: |
          az webapp config appsettings set --name tfs-${{ env.environment }}-portal-ui \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000 \
              DEAL_API_URL="${{ env.DEAL_API_URL }}" \
              COMPANIES_HOUSE_API_URL="${{ env.COMPANIES_HOUSE_API_URL }}"

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config connection-string set --name tfs-${{ env.environment }}-portal-ui \
            --connection-string-type custom \
            --settings \
              SESSION_SECRET="${{ env.SESSION_SECRET }}" \
              REDIS_URI="${{ env.REDIS_URI }}" \
              COMPANIES_HOUSE_API_KEY="${{ env.COMPANIES_HOUSE_API_KEY }}"

  portal-api:
    name: Portal API
    runs-on: ubuntu-latest
    # Delaying to avoid clashing with container image promotion
    needs: [portal-api-vnet, cosmos-db]
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-portal-api \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/portal-api:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-portal-api \
            --vnet tfs-${{ env.app_service_plan }}-portal-api \
            --subnet backing-services

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-portal-api \
            --always-on true

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-portal-api \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-portal-api \
            --docker-container-logging filesystem

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
          az webapp config appsettings set --name tfs-${{ env.environment }}-portal-api \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config connection-string set --name tfs-${{ env.environment }}-portal-api \
            --connection-string-type custom \
            --settings \
              AZURE_PORTAL_EXPORT_FOLDER="${{ env.AZURE_PORTAL_EXPORT_FOLDER }}" \
              AZURE_PORTAL_FILESHARE_NAME="${{ env.AZURE_PORTAL_FILESHARE_NAME }}" \
              AZURE_PORTAL_STORAGE_ACCESS_KEY="${{ env.AZURE_PORTAL_STORAGE_ACCESS_KEY }}" \
              AZURE_PORTAL_STORAGE_ACCOUNT="${{ env.AZURE_PORTAL_STORAGE_ACCOUNT }}" \
              AZURE_WORKFLOW_EXPORT_FOLDER="${{ env.AZURE_WORKFLOW_EXPORT_FOLDER }}" \
              AZURE_WORKFLOW_FILESHARE_NAME="${{ env.AZURE_WORKFLOW_FILESHARE_NAME }}" \
              AZURE_WORKFLOW_IMPORT_FOLDER="${{ env.AZURE_WORKFLOW_IMPORT_FOLDER }}" \
              AZURE_WORKFLOW_STORAGE_ACCOUNT="${{ env.AZURE_WORKFLOW_STORAGE_ACCOUNT }}" \
              AZURE_WORKFLOW_STORAGE_ACCESS_KEY="${{ env.AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}" \
              MONGO_INITDB_DATABASE="${{ env.database_name }}" \
              MONGODB_URI="${{ env.MONGODB_URI }}" \
              JWT_SIGNING_KEY="${{ env.JWT_SIGNING_KEY }}" \
              JWT_VALIDATING_KEY="${{ env.JWT_VALIDATING_KEY }}" \
              GOV_NOTIFY_API_KEY="${{ env.GOV_NOTIFY_API_KEY }}" \
              GOV_NOTIFY_EMAIL_RECIPIENT="${{ env.GOV_NOTIFY_EMAIL_RECIPIENT }}"

  cosmos-db:
    name: Cosmos DB (Mongo)
    runs-on: ubuntu-latest
    needs: portal-api-vnet
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Cosmos account for mongodb
      uses: Azure/cli@v1.0.0
      with:
        # On activating "Allow access from Azure Portal":
        # https://github.com/Azure/azure-cli/issues/7495 ->
        # https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-the-azure-portal
        # ALLOW REQUESTS FROM THE AZURE PORTAL
        # Region IP address
        # Germany 51.4.229.218
        # China 139.217.8.252
        # US Gov 52.244.48.71
        # All other regions 104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26
        inlineScript: |
          az cosmosdb create --name tfs-${{ env.environment }}-mongo --kind MongoDB --server-version 3.6

    - name: Database with autoscale
      uses: Azure/cli@v1.0.0
      with:
        # TODO: switch from provisioned throughput to "serverless" capacity at the account level once it's available for Mongo (currently available for sql).
        # TODO: enable continuous backup once that becomes available - looks like it's in private beta at the moment.
        inlineScript: |
          az cosmosdb mongodb database create --account tfs-${{ env.environment }}-mongo --name ${{ env.database_name }} --max-throughput 4000

    - name: Collections
      uses: Azure/cli@v1.0.0
      with:
        # Creating collections is slow, so we show them before we attempt to create.
        inlineScript: |
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name deals || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name deals --shard "_id" \
            --idx '[{"key": {"keys": ["details.dateOfLastAction"]}}, {"key": {"keys": ["_id"]}}]'
          
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name banks || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name banks --shard "_id"
          
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name eligibilityCriteria || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name eligibilityCriteria --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name mandatoryCriteria || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name mandatoryCriteria --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name currencies || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name currencies --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name users || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name users --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name industrySectors || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name industrySectors --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name countries || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name countries --shard "_id"
          
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name idCounters || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name idCounters --shard "_id"

    - name: Add Deal ID counter
      run: |
        cat <<EOF > deal-counter.js
        db = db.getSiblingDB('tfs-portal')
        try {
          db.idCounters.insertOne({
            "_id" : "DEAL_COUNTER",
            "count" : 1000000
          })
        } catch (err) {
          print("Deal counter exists.")
          print(err)
        }
        EOF
        cat deal-counter.js
        mongo ${{ env.MONGODB_URI }} deal-counter.js
        mongo ${{ env.MONGODB_URI }} deal-counter.js
        mongo ${{ env.MONGODB_URI }} deal-counter.js
        mongo ${{ env.MONGODB_URI }} deal-counter.js

    - name: Add Facility ID counter
      run: |
        cat <<EOF > facility-counter.js
        db = db.getSiblingDB('tfs-portal')
        try {
          db.idCounters.insertOne({
            "_id" : "FACILITY_COUNTER",
            "count" : 1000000
          })
        } catch (err) {
          print("Facility counter exists.")
          print(err)
        }
        EOF
        cat facility-counter.js
        mongo ${{ env.MONGODB_URI }} facility-counter.js
        mongo ${{ env.MONGODB_URI }} facility-counter.js
        mongo ${{ env.MONGODB_URI }} facility-counter.js
        mongo ${{ env.MONGODB_URI }} facility-counter.js

    - name: Access restriction - ${{ env.protected_database }}
      uses: Azure/cli@v1.0.0
      with:
        # This fails if we want to expose the database,
        # so we fall back to enabling public network access
        inlineScript: |
          # az cosmosdb update --name tfs-${{ env.environment }}-mongo \
          #   --enable-virtual-network ${{ env.protected_database }} \
          #   --ip-range-filter 104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26 || \
          az cosmosdb update --name tfs-${{ env.environment }}-mongo \
            --enable-virtual-network false \
            --enable-public-network true

    - name: Enable vnet access
      uses: Azure/cli@v1.0.0
      with:
        # This fails if we want to expose the database,
        # so we fall back to just an echo statement.
        inlineScript: |
          # az cosmosdb network-rule add --name tfs-${{ env.environment }}-mongo \
          #   --vnet-name tfs-${{ env.app_service_plan }}-portal-api \
          #   --subnet backing-services || \
          echo "Not restricting to a subnet."

  front-door:
    # NB Front Door takes a little while to be available
    # So you won't get a successful request for the first few minutes.
    name: WAF/DDoS
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

          # Front door requires an extension to the az cli:
          az extension add --name front-door

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        # NB we seem to get a lot of traffic to app service from FD, so reducing probes to 60s from 30s
        inlineScript: |
          az network front-door create --name tfs-${{ env.environment }}-fd \
            --accepted-protocols Https \
            --forwarding-protocol HttpsOnly \
            --backend-address tfs-${{ env.environment }}-portal-ui.azurewebsites.net \
            --probeMethod GET \
            --protocol Https \
            --interval 60 \
            --path "/healthcheck"

    - name: Redirect to https
      uses: Azure/cli@v1.0.0
      with:
        # NB "DefaultFrontendEndpoint" is the name assigned by the command above.
        # If this changes, use "az network front-door show --name tfs-???-fd | grep FrontendEndpoints"
        inlineScript: |
          az network front-door routing-rule create --front-door-name tfs-${{ env.environment }}-fd \
            --name RedirectToHttps \
            --frontend-endpoints DefaultFrontendEndpoint \
            --route-type Redirect \
            --accepted-protocols Http \
            --redirect-protocol HttpsOnly

    - name: API routing
      uses: Azure/cli@v1.0.0
      with:
        # NB "DefaultFrontendEndpoint" is the name assigned by the command above.
        # If this changes, use "az network front-door show --name tfs-???-fd | grep FrontendEndpoints"
        inlineScript: |
          az network front-door load-balancing create --front-door-name tfs-${{ env.environment }}-fd \
            --name api-lb \
            --sample-size 4 \
            --successful-samples-required 2
          az network front-door probe create --front-door-name tfs-${{ env.environment }}-fd \
            --interval 60 \
            --name api-probe \
            --path /healthcheck \
            --probeMethod GET \
            --protocol Https
          az network front-door backend-pool create --front-door-name tfs-${{ env.environment }}-fd \
            --name portal-api \
            --address tfs-${{ env.environment }}-portal-api.azurewebsites.net \
            --load-balancing api-lb \
            --probe api-probe
          az network front-door routing-rule create --front-door-name tfs-${{ env.environment }}-fd \
            --name API \
            --frontend-endpoints DefaultFrontendEndpoint \
            --route-type Forward \
            --accepted-protocols Https \
            --forwarding-protocol HttpsOnly \
            --backend-pool portal-api \
            --patterns "/v1/*"

  file-storage:
    name: File storage
    runs-on: ubuntu-latest
    needs: portal-api-vnet
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        # We open up access briefly so file shares can be created/updated
        inlineScript: |
          az storage account create --name tfs${{ env.environment }}storage \
            --sku Standard_ZRS \
            --https-only true \
            --encryption-services file \
            --default-action Allow

    - name: File share (files)
      uses: Azure/cli@v1.0.0
      with:
        # Opening up permissions only seems to work reliably on initial creation,
        # so we skip attempting to create the file share if it fails.
        inlineScript: |
          az storage share create --account-name tfs${{ env.environment }}storage \
            --name files || \
          echo Skipped.

    - name: File share (workflow)
      uses: Azure/cli@v1.0.0
      with:
        # This fileshare is used if the environment isn't integrated to Workflow.
        # Opening up permissions only seems to work reliably on initial creation,
        # so we skip attempting to create the file share if it fails.
        inlineScript: |
          az storage share create --account-name tfs${{ env.environment }}storage \
            --name workflow || \
          echo Skipped.

    - name: Access restriction
      if: ${{ always() }}
      uses: Azure/cli@v1.0.0
      with:
        # Always remove public access
        # On activating "Allow access from Azure Portal":
        # https://github.com/Azure/azure-cli/issues/7495 ->
        # https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-the-azure-portal
        # ALLOW REQUESTS FROM THE AZURE PORTAL
        # Region IP address
        # Germany 51.4.229.218
        # China 139.217.8.252
        # US Gov 52.244.48.71
        # All other regions 104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26
        inlineScript: |
          az storage account update --name tfs${{ env.environment }}storage --default-action Deny
          az storage account network-rule add --account-name tfs${{ env.environment }}storage \
            --vnet-name tfs-${{ env.app_service_plan }}-portal-api \
            --subnet backing-services

  session-store:
    name: Redis (sessions)
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az redis create --name tfs-${{ env.environment }}-redis \
            --sku ${{ env.redis_sku }} \
            --vm-size C0
