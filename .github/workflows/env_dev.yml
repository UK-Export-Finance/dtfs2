name: Dev environment infrastructure 

on:
  push:
    branches: [ master ]
    paths: 
    - '.github/workflows/env_dev.yml'

env:
  # Environment
  front_door_access: Allow
  environment: dev
  credentials: ${{ secrets.AZURE_DIGITAL_DEV }}
  resource_group: ${{ secrets.DEV_RESOURCE_GROUP }}
  app_service_plan: dev
  redis_sku: Basic
  database_name: dtfs-submissions
  application_gateway_cidr: 10.0.0.0/28
  private_endpoints_cidr: 10.0.1.0/28
  # Container registry
  registry: ${{ secrets.DEV_ACR_REGISTRY }}
  # App service settings
  COMPANIES_HOUSE_API_URL: "https://api.companieshouse.gov.uk"
  # App service secrets
  SESSION_SECRET: "${{ secrets.DEV_SESSION_SECRET }}"
  COMPANIES_HOUSE_API_KEY: "${{ secrets.COMPANIES_HOUSE_API_KEY }}"
  AZURE_PORTAL_FILESHARE_NAME: "${{ secrets.DEV_AZURE_PORTAL_FILESHARE_NAME }}"
  AZURE_PORTAL_EXPORT_FOLDER: "${{ secrets.DEV_AZURE_PORTAL_EXPORT_FOLDER }}"
  AZURE_WORKFLOW_STORAGE_ACCOUNT: "${{ secrets.DEV_AZURE_WORKFLOW_STORAGE_ACCOUNT }}"
  AZURE_WORKFLOW_STORAGE_ACCESS_KEY: "${{ secrets.DEV_AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}"
  AZURE_WORKFLOW_FILESHARE_NAME: "${{ secrets.DEV_AZURE_WORKFLOW_FILESHARE_NAME }}"
  AZURE_WORKFLOW_EXPORT_FOLDER: "${{ secrets.DEV_AZURE_WORKFLOW_EXPORT_FOLDER }}"
  AZURE_WORKFLOW_IMPORT_FOLDER: "${{ secrets.DEV_AZURE_WORKFLOW_IMPORT_FOLDER }}"
  MONGODB_ROOT_USER: "${{ secrets.DEV_MONGODB_ROOT_USER }}"
  MONGODB_ROOT_SALT: "${{ secrets.DEV_MONGODB_ROOT_SALT }}"
  MONGODB_ROOT_HASH: "${{ secrets.DEV_MONGODB_ROOT_HASH}}"
  JWT_SIGNING_KEY: "${{ secrets.DEV_JWT_SIGNING_KEY }}"
  JWT_VALIDATING_KEY: "${{ secrets.DEV_JWT_VALIDATING_KEY }}"
  GOV_NOTIFY_API_KEY: "${{ secrets.DEV_GOV_NOTIFY_API_KEY }}"
  GOV_NOTIFY_EMAIL_RECIPIENT: "${{ secrets.GOV_NOTIFY_EMAIL_RECIPIENT }}"
  MULESOFT_API_NUMBER_GENERATOR_URL: "${{ secrets.DEV_MULESOFT_API_NUMBER_GENERATOR_URL }}"
  MULESOFT_API_KEY: "${{ secrets.DEV_MULESOFT_API_KEY }}"
  MULESOFT_API_SECRET: "${{ secrets.DEV_MULESOFT_API_SECRET }}"


  DTFS_PORTAL_SCHEDULER: false
  FETCH_WORKFLOW_TYPE_B_SCHEDULE: "* * * * *"


# Below this line should be the same for all environments

jobs:
  # START Virtual Network setup 
  vnet:
    # NB Only one vnet can be associated per App Service Plan,
    # therefore all App Services on a plan must share a single vnet.
    # So we name the vnet after the app service plan, rather than the environment.
    name: Vnet
    runs-on: ubuntu-latest
    steps:

    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Vnet
      uses: Azure/cli@v1.0.0
      with:
        # We have to do a show here or we get an error on create if the vnet already exists:
        inlineScript: |
          az network vnet show --name tfs-${{ env.app_service_plan }}-vnet || \
          az network vnet create --name tfs-${{ env.app_service_plan }}-vnet

    - name: Application Gateway subnet
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network vnet subnet create \
            --name ${{ env.environment }}-gateway \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --address-prefixes ${{ env.application_gateway_cidr }}

    - name: Private links subnet
      uses: Azure/cli@v1.0.0
      with:
        # Subnet for hosting private endpoints for microservices and backing services.
        # Apparently you can't both delegate and have private endpoints in the same subnet.
        inlineScript: |
          az network vnet subnet show --name ${{ env.environment }}-private-endpoints --vnet-name tfs-${{ env.app_service_plan }}-vnet || \
          az network vnet subnet create \
            --name ${{ env.environment }}-private-endpoints \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --address-prefixes ${{ env.private_endpoints_cidr }}
          az network vnet subnet update \
            --name ${{ env.environment }}-private-endpoints \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --disable-private-endpoint-network-policies true

    - name: App Service Plan egress subnet
      uses: Azure/cli@v1.0.0
      with:
        # Subnet for delegation to App Service for outbound traffic from microservices
        # Delegation Microsoft.Web/serverFarms allows only one App Service plan to be associated,
        # So this subnet is named after the app service plan, rather than after the environment.
        inlineScript: |
          az network vnet subnet create \
            --name ${{ env.app_service_plan }}-app-service-plan-egress \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --delegations Microsoft.Web/serverFarms \
            --service-endpoints Microsoft.AzureCosmosDB \
            --address-prefixes 10.0.200.0/28
            
            
    # We'll aim to move this out of this section and consolidate into a single VM job:
    - name: Virtual machine subnet
      uses: Azure/cli@v1.0.0
      with:
        # Subnet for a temporary maintenance virtual machine.
        inlineScript: |
          az network vnet subnet create \
            --name ${{ env.resource_group }}-vm \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --address-prefixes 10.0.210.0/28 \
            --service-endpoints Microsoft.AzureCosmosDB
          
  private-dns:
    name: Private DNS zones
    needs: vnet
    runs-on: ubuntu-latest
    steps:

    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Zones
      uses: Azure/cli@v1.0.0
      with:
        # We have to do a show here or we get an error on create if the zone already exists:
        inlineScript: |
          az network private-dns zone show   --name "privatelink.azurewebsites.net" || \
          az network private-dns zone create --name "privatelink.azurewebsites.net"
          
          az network private-dns zone show   --name "privatelink.mongo.cosmos.azure.com" || \
          az network private-dns zone create --name "privatelink.mongo.cosmos.azure.com"
          
          az network private-dns zone show   --name "privatelink.file.core.windows.net" || \
          az network private-dns zone create --name "privatelink.file.core.windows.net"
          
          az network private-dns zone show   --name "privatelink.redis.cache.windows.net" || \
          az network private-dns zone create --name "privatelink.redis.cache.windows.net"

    - name: Link DNS zones to vnet
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network private-dns link vnet show   --name app-service-dns --zone-name "privatelink.azurewebsites.net" || \
          az network private-dns link vnet create --name app-service-dns --zone-name "privatelink.azurewebsites.net" --registration-enabled false --virtual-network tfs-${{ env.app_service_plan }}-vnet

          az network private-dns link vnet show   --name mongo-dns --zone-name "privatelink.mongo.cosmos.azure.com" || \
          az network private-dns link vnet create --name mongo-dns --zone-name "privatelink.mongo.cosmos.azure.com" --registration-enabled false --virtual-network tfs-${{ env.app_service_plan }}-vnet

          az network private-dns link vnet show   --name storage-dns --zone-name "privatelink.file.core.windows.net" || \
          az network private-dns link vnet create --name storage-dns --zone-name "privatelink.file.core.windows.net" --registration-enabled false --virtual-network tfs-${{ env.app_service_plan }}-vnet

          az network private-dns link vnet show   --name storage-dns --zone-name "privatelink.redis.cache.windows.net" || \
          az network private-dns link vnet create --name storage-dns --zone-name "privatelink.redis.cache.windows.net" --registration-enabled false --virtual-network tfs-${{ env.app_service_plan }}-vnet
 
  public-ip:
    name: Public IP
    runs-on: ubuntu-latest
    steps:

    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: IP address
      uses: Azure/cli@v1.0.0
      with:
        # Application Gateway requires Static IP allocation and Standard SKU at the time of writing.
        inlineScript: |
          az network public-ip create --name tfs-${{ env.environment }}-ip \
            --allocation-method Static \
            --sku Standard

          az network public-ip create --name tfs-${{ env.environment }}-tfm-ip \
            --allocation-method Static \
            --sku Standard

  # END Virtual Network setup

  # START Network Security Group
  network-security-group:
    name: Network Security Group Create
    needs: vnet
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Network Security Group
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network nsg create  --name tfs-${{ env.environment }}-gw-nsg

    - name: Application Gateway management traffic
      uses: Azure/cli@v1.0.0
      with:
        # The "GatewayManager" rule is explained in the Application Gateway FAQ: 
        #   https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-faq#how-do-i-use-application-gateway-v2-with-only-private-frontend-ip-address
        # See also: https://stackoverflow.com/questions/52674810/azure-app-gateway-v2-cannot-be-configured-with-nsg/52697957
        inlineScript: |
          az network nsg rule create --name gateway-manager --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 100 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "GatewayManager" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "65200-65535"

    - name: ${{ env.front_door_access }} Front Door traffic
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network nsg rule create --name front-door --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 200 --direction Inbound --protocol "*" --access ${{ env.front_door_access }} \
            --source-address-prefixes "AzureFrontDoor.Backend" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

    - name: Allow Azure fileshare
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network nsg rule create --name front-door --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 200 --direction Inbound --protocol "*" --access ${{ env.front_door_access }} \
            --source-address-prefixes "AzureFrontDoor.Backend" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

    - name: Temporary team IPs
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          # VMs
          az network nsg rule create --name vm-ips-dev --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 997 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "51.104.202.42" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"
          az network nsg rule create --name vm-ips-test --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 998 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "51.11.144.7" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"
          az network nsg rule create --name vm-ips-prod --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 999 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "51.145.36.44" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

          # David
          az network nsg rule create --name team-ips-david --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 1000 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "195.188.184.171" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

          # Andrew
          az network nsg rule create --name team-ips-andrew --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 2000 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "81.174.144.245" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

          # UKEF IP
          az network nsg rule create --name team-ips-ukef --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 3000 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "51.140.76.208" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

          # Tony B
          az network nsg rule create --name team-ips-tonyb --nsg-name tfs-${{ env.environment }}-gw-nsg \
            --priority 4001 --direction Inbound --protocol "*" --access Allow \
            --source-address-prefixes "87.74.98.153" --source-port-ranges "*" \
            --destination-address-prefixes "*" --destination-port-ranges "*"

          # Caroline - VM
          az network nsg rule create --name team-ips-caroline-vm --nsg-name tfs-${{ env.environment }}-gw-nsg \
          --priority 4002 --direction Inbound --protocol "*" --access Allow \
          --source-address-prefixes "51.132.249.180" --source-port-ranges "*" \
          --destination-address-prefixes "*" --destination-port-ranges "*"

    - name: Associate NSG to gateway subnet
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network vnet subnet update --name ${{ env.environment }}-gateway --vnet-name tfs-${{ env.app_service_plan }}-vnet --network-security-group tfs-${{ env.environment }}-gw-nsg
          az network vnet subnet update --name ${{ env.environment }}-private-endpoints --vnet-name tfs-${{ env.app_service_plan }}-vnet --network-security-group tfs-${{ env.environment }}-gw-nsg
          
  # END Network Security Group

  # START CosmosDB setup
  cosmos-db-create:
    name: Cosmos DB (Mongo) Create
    needs: vnet
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}
      
    - name: Cosmos account for mongodb
      uses: Azure/cli@v1.0.0
      with:
        # On activating "Allow access from Azure Portal":
        # https://github.com/Azure/azure-cli/issues/7495 ->
        # https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-firewall#allow-requests-from-the-azure-portal
        # ALLOW REQUESTS FROM THE AZURE PORTAL
        # Region IP address
        # Germany 51.4.229.218
        # China 139.217.8.252
        # US Gov 52.244.48.71
        # All other regions 104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26
        inlineScript: |
          
          az cosmosdb create \
            --name tfs-${{ env.environment }}-mongo \
            --kind MongoDB \
            --enable-virtual-network true \
            --server-version 3.6
          
    - name: Add mongo service endpoints
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |

          svcEndpoint=$(az network vnet subnet show --name ${{ env.app_service_plan }}-app-service-plan-egress --vnet-name tfs-${{ env.app_service_plan }}-vnet --query 'id' -o tsv) 
          az cosmosdb network-rule add \
            --subnet "$svcEndpoint" \
            --name tfs-${{ env.environment }}-mongo \
            --virtual-network ${{ env.app_service_plan }}-app-service-plan-egress \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet
          
          vmEndpoint=$(az network vnet subnet show --name ${{ env.resource_group }}-vm --vnet-name tfs-${{ env.app_service_plan }}-vnet --query 'id' -o tsv)
          az cosmosdb network-rule add \
            --subnet "$vmEndpoint" \
            --name tfs-${{ env.environment }}-mongo \
            --virtual-network ${{ env.app_service_plan }}-app-service-plan-egress \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet

    - name: Database with autoscale
      uses: Azure/cli@v1.0.0
      with:
        # TODO: switch from provisioned throughput to "serverless" capacity at the account level once it's available for Mongo (currently available for sql).
        # TODO: enable continuous backup once that becomes available - looks like it's in private beta at the moment.
        inlineScript: |
          az cosmosdb mongodb database create --account tfs-${{ env.environment }}-mongo --name ${{ env.database_name }} --max-throughput 4000

  cosmos-db-init:
    name: Cosmos DB (Mongo) Initialise Collections
    needs: cosmos-db-create
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Collections
      uses: Azure/cli@v1.0.0
      with:
        # Creating collections is slow, so we show them before we attempt to create.
        inlineScript: |
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name deals || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name deals --shard "_id" \
            --idx '[{"key": {"keys": ["details.dateOfLastAction"]}}, {"key": {"keys": ["_id"]}}]'
          
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name banks || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name banks --shard "_id"
          
          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name eligibilityCriteria || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name eligibilityCriteria --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name mandatoryCriteria || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name mandatoryCriteria --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name users || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name users --shard "_id"

          az cosmosdb mongodb collection show   --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name idCounters || \
          az cosmosdb mongodb collection create --account tfs-${{ env.environment }}-mongo --database-name ${{ env.database_name }} --name idCounters --shard "_id"
  
  # cosmos-db-populate:
  #   name: Cosmos DB (Mongo) Initialise root user
  #   needs: cosmos-db-init
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: azure/login@v1
  #     with:
  #       creds: ${{ env.credentials }}

  #   - name: Defaults
  #     uses: Azure/cli@v1.0.0
  #     with:
  #       inlineScript: |
  #         az configure --defaults location=uksouth
  #         az configure --defaults group=${{ env.resource_group }}  
    
  #   - name: Populate Collections
  #     run: |

  #       mongo_connection_string=$(az cosmosdb keys list --name tfs-${{ env.environment }}-mongo --type connection-strings --query "connectionStrings[0].connectionString" -o tsv | sed -e "s/&replicaSet=globaldb//g")

  #       cat <<EOF > db-init.js
  #       db = db.getSiblingDB("${{ env.database_name }}")
  #       try {
  #         db.users.insertOne(
  #           {
  #             "_id" : ObjectId('000000000000000000000001'),
  #             "user-status": "active",
  #             "timezone": "Europe/London",
  #             "username": "${{ env.MONGODB_ROOT_USER }}",
  #             "firstname": "ROOT",
  #             "surname": "USER",
  #             "email": "",
  #             "roles": [
  #               "maker",
  #               "editor",
  #               "admin"
  #             ],
  #             "bank": {
  #               "id": "*"
  #             },
  #             salt: "${{ env.MONGODB_ROOT_SALT }}",
  #             hash: "${{ env.MONGODB_ROOT_HASH }}"
  #           },    
  #         )
  #       } catch (err) {
  #         print("User: ${{ env.MONGODB_ROOT_USER }} already exists.")
  #         print(err)
  #       }
  #       EOF
  #       echo "Initialising Root user"
  #       echo "Mongo connection string: $mongo_connection_string"
  #       echo "Mongo version:"
  #       mongo --version
  #       mongo "$mongo_connection_string" db-init.js
  #       echo end.
      
  cosmos-db-private:
    name: Cosmos DB (Mongo) Make Private
    needs: [cosmos-db-init, private-dns]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}
      
    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}         
          
    - name: Private link
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource"
        #     The purpose of connection-name is unknown.
        inlineScript: |
          mongo_id=$(az cosmosdb show --name tfs-${{ env.environment }}-mongo --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-mongo \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$mongo_id" \
            --group-id MongoDB \
            --connection-name tfs-${{ env.environment }}-mongo
    
    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that Mongo names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-private-endpoints#integrate-the-private-endpoint-with-a-private-dns-zone-1
        # NB the zone name needs to be "privatelink.mongo.cosmos.azure.com" rather than "privatelink.documents.azure.com" as per the link above.
        # NB ipConfigurations[0] appears to be the "primary". There's also a property called "requiredMemberName" that *seems* to be the value needed for record-set-name but I can't find any documentation on it, so sticking with [0] and [1] for now:
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-mongo --zone-name "privatelink.mongo.cosmos.azure.com" --query "aRecords[0].ipv4Address" -o tsv || echo "")
          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-mongo --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids $interface_id --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)

          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-mongo --zone-name "privatelink.mongo.cosmos.azure.com" --query "aRecords[0].ipv4Address" -o tsv || echo "")
          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-mongo --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids $interface_id --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          uksouth_interface_ip=$(az resource show --ids $interface_id --query "properties.ipConfigurations[1].properties.privateIPAddress" -o tsv)

          if [ -z "$ipv4_address" ]
          then
            az network private-dns record-set a show   --name tfs-${{ env.environment }}-mongo --zone-name "privatelink.mongo.cosmos.azure.com" || \
            az network private-dns record-set a create --name tfs-${{ env.environment }}-mongo --zone-name "privatelink.mongo.cosmos.azure.com"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-mongo \
              --zone-name "privatelink.mongo.cosmos.azure.com" \
              --ipv4-address $interface_ip

            uksouth_interface_ip=$(az resource show --ids $interface_id --query "properties.ipConfigurations[1].properties.privateIPAddress" -o tsv)
            az network private-dns record-set a show   --name tfs-${{ env.environment }}-mongo-uksouth --zone-name "privatelink.mongo.cosmos.azure.com" || \
            az network private-dns record-set a create --name tfs-${{ env.environment }}-mongo-uksouth --zone-name "privatelink.mongo.cosmos.azure.com"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-mongo-uksouth \
              --zone-name "privatelink.mongo.cosmos.azure.com" \
              --ipv4-address $uksouth_interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Update private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-mongo --zone-name "privatelink.mongo.cosmos.azure.com" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-mongo --zone-name "privatelink.mongo.cosmos.azure.com"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-mongo \
              --zone-name "privatelink.mongo.cosmos.azure.com" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-mongo-uksouth --zone-name "privatelink.mongo.cosmos.azure.com" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-mongo-uksouth --zone-name "privatelink.mongo.cosmos.azure.com"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-mongo-uksouth \
              --zone-name "privatelink.mongo.cosmos.azure.com" \
              --ipv4-address $uksouth_interface_ip
          fi
  # END CosmosDB setup

  # START File Storage setup
  file-storage:
    name: File storage
    needs: [vnet, private-dns]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az storage account create --name tfs${{ env.environment }}storage \
            --sku Standard_ZRS \
            --https-only true \
            --encryption-services file

    - name: File share (files)
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az storage share create --account-name tfs${{ env.environment }}storage --name ${{ env.AZURE_PORTAL_FILESHARE_NAME }}

    - name: File share (workflow)
      uses: Azure/cli@v1.0.0
      with:
        # This fileshare is used if the environment isn't integrated to Workflow.
        inlineScript: |
          az storage share create --account-name tfs${{ env.environment }}storage --name workflow

    - name: Private link
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource"
        #     The purpose of connection-name is unknown.
        inlineScript: |
          file_storage_id=$(az storage account show --name tfs${{ env.environment }}storage --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs${{ env.environment }}storage \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$file_storage_id" \
            --group-id file \
            --connection-name tfs${{ env.environment }}storage
             
    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that Stogare Accounts resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/storage/files/storage-files-networking-endpoints?tabs=azure-cli
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs${{ env.environment }}storage --zone-name "privatelink.file.core.windows.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs${{ env.environment }}storage --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs${{ env.environment }}storage --zone-name "privatelink.file.core.windows.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs${{ env.environment }}storage \
              --zone-name "privatelink.file.core.windows.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Updating private link IP address...

            az network private-dns record-set a delete --name tfs${{ env.environment }}storage --zone-name "privatelink.file.core.windows.net" --yes
            az network private-dns record-set a create --name tfs${{ env.environment }}storage --zone-name "privatelink.file.core.windows.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs${{ env.environment }}storage \
              --zone-name "privatelink.file.core.windows.net" \
              --ipv4-address $interface_ip
          fi
  # END File Storage setup

  # START Redis setup           
  redis:
    name: Redis session store
    needs: [vnet, private-dns]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az redis create --name tfs-${{ env.environment }}-redis \
            --sku ${{ env.redis_sku }} \
            --vm-size C0
    
    # Apparently private link for Redis is in preview, but it's not available in the UKEF Azure portal:
    # https://docs.microsoft.com/en-us/azure/azure-cache-for-redis/cache-private-link
    # This may have changed as of 6 Oct 2020
    # - name: Private link
    #   uses: Azure/cli@v1.0.0
    #   with:
    #     # Restrict inbound traffic to not be open to the Internet
    #     # NB: group-id isn't well documented. It means "Target sub-resource"
    #     #     The purpose of connection-name is unknown.
    #     inlineScript: |
    #       redis_id=$(az redis show --name tfs-${{ env.environment }}-redis --query "id" -o tsv)
    #       az network private-endpoint create \
    #         --name tfs-${{ env.environment }}-redis \
    #         --vnet-name tfs-${{ env.app_service_plan }}-vnet \
    #         --subnet ${{ env.environment }}-private-endpoints \
    #         --private-connection-resource-id "$redis_id" \
    #         --group-id redisCache \
    #         --connection-name tfs-${{ env.environment }}-redis
             
    # - name: DNS A-records
    #   uses: Azure/cli@v1.0.0
    #   with:
    #     # We have to add explicit A records so that redis resolves correctly to the private endpoint address
    #     inlineScript: |
    #       ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-redis --zone-name "privatelink.redis.cache.windows.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

    #       interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-redis --query 'networkInterfaces[0].id' -o tsv)
    #       interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
    #       # Create
    #       if [ -z "$ipv4_address" ]
    #       then
    #         echo Setting private link IP address...

    #         az network private-dns record-set a create --name tfs-${{ env.environment }}-redis --zone-name "privatelink.redis.cache.windows.net"
    #         az network private-dns record-set a add-record \
    #           --record-set-name tfs-${{ env.environment }}-redis \
    #           --zone-name "privatelink.redis.cache.windows.net" \
    #           --ipv4-address $interface_ip
    #       fi

    #       # Update
    #       if [ "$ipv4_address" != "$interface_ip" ]
    #       then
    #         echo Updating private link IP address...

    #         az network private-dns record-set a delete --name tfs-${{ env.environment }}-redis --zone-name "privatelink.redis.cache.windows.net" --yes
    #         az network private-dns record-set a create --name tfs-${{ env.environment }}-redis --zone-name "privatelink.redis.cache.windows.net"
    #         az network private-dns record-set a add-record \
    #           --record-set-name tfs-${{ env.environment }}-redis \
    #           --zone-name "privatelink.redis.cache.windows.net" \
    #           --ipv4-address $interface_ip
    #       fi
  # END Redis setup

  # START API setup
  reference-data-proxy:
    name: Reference data API
    needs: [vnet, private-dns]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-reference-data-proxy \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/reference-data-proxy:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        # Enable outbound traffic from Portal API to the services subnet so we can access Cosmos and Storage
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-reference-data-proxy \
            --vnet tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.app_service_plan }}-app-service-plan-egress

    - name: Private endpoint
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource".
        #     The purpose of connection-name is unknown.
        inlineScript: |
          reference_data_api_id=$(az webapp show --name tfs-${{ env.environment }}-reference-data-proxy --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-reference-data-proxy \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$reference_data_api_id" \
            --group-id sites \
            --connection-name tfs-${{ env.environment }}-reference-data-proxy

    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
        # NB the -z tests below are checking 
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-reference-data-proxy --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-reference-data-proxy --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs-${{ env.environment }}-reference-data-proxy --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-reference-data-proxy \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
            
            az network private-dns record-set a create --name tfs-${{ env.environment }}-reference-data-proxy.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-reference-data-proxy.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Update private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-reference-data-proxy --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-reference-data-proxy --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-reference-data-proxy \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-reference-data-proxy.scm --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-reference-data-proxy.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-reference-data-proxy.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-reference-data-proxy \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-reference-data-proxy \
            --docker-container-logging filesystem

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-reference-data-proxy \
            --always-on true

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
        # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        # NOTE: MULESOFT envs were producing an error when used in connection_string so have been moved to appsettings
        # ref: https://docs.microsoft.com/en-us/azure/app-service/configure-common 
        inlineScript: |
          az webapp config appsettings set --name tfs-${{ env.environment }}-reference-data-proxy \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000 \
              MULESOFT_API_NUMBER_GENERATOR_URL="${{ env.MULESOFT_API_NUMBER_GENERATOR_URL }}" \
              MULESOFT_API_KEY="${{ env.MULESOFT_API_KEY }}" \
              MULESOFT_API_SECRET="${{ env.MULESOFT_API_SECRET }}"

  dtfs-central-api:
    name: DTFS Central API
    needs: [vnet, private-dns, cosmos-db-private, reference-data-proxy]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-dtfs-central-api \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/dtfs-central-api:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        # Enable outbound traffic from Portal API to the services subnet so we can access Cosmos and Storage
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-dtfs-central-api \
            --vnet tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.app_service_plan }}-app-service-plan-egress

    - name: Private endpoint
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource".
        #     The purpose of connection-name is unknown.
        inlineScript: |
          dtfs_central_id=$(az webapp show --name tfs-${{ env.environment }}-dtfs-central-api --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-dtfs-central-api \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$dtfs_central_id" \
            --group-id sites \
            --connection-name tfs-${{ env.environment }}-dtfs-central-api

    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
        # NB the -z tests below are checking 
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-dtfs-central-api --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-dtfs-central-api --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs-${{ env.environment }}-dtfs-central-api --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-dtfs-central-api \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
            
            az network private-dns record-set a create --name tfs-${{ env.environment }}-dtfs-central-api.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-dtfs-central-api.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Update private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-dtfs-central-api --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-dtfs-central-api --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-dtfs-central-api \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-dtfs-central-api.scm --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-dtfs-central-api.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-dtfs-central-api.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-dtfs-central-api \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-dtfs-central-api \
            --docker-container-logging filesystem

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-dtfs-central-api \
            --always-on true

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
        # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        inlineScript: |
          az webapp config appsettings set --name tfs-${{ env.environment }}-dtfs-central-api \
            --settings \
              WEBSITE_DNS_SERVER="168.63.129.16" \
              WEBSITE_VNET_ROUTE_ALL=1 \
              PORT=5000 \
              WEBSITES_PORT=5000

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          mongo_connection_string=$(az cosmosdb keys list --name tfs-${{ env.environment }}-mongo --type connection-strings --query "connectionStrings[0].connectionString" -o tsv | sed -e "s/&replicaSet=globaldb//g")
          echo "Mongo connection string: $mongo_connection_string"

          reference_data_proxy_url=$(az webapp show --name tfs-${{ env.environment }}-reference-data-proxy --query defaultHostName -o tsv)

          portal_file_storage_key=$(az storage account keys list --account-name tfs${{ env.environment }}storage --query [0].value -o tsv)

          echo "Reference data proxy url: http://$reference_data_proxy_url"

          az webapp config connection-string set --name tfs-${{ env.environment }}-dtfs-central-api \
            --connection-string-type custom \
            --settings \
              MONGO_INITDB_DATABASE="${{ env.database_name }}" \
              MONGODB_URI="$mongo_connection_string" \
              REFERENCE_DATA_PROXY_URL="http://$reference_data_proxy_url"   

  portal-api:
    name: Portal API
    needs: [vnet, private-dns, cosmos-db-private, reference-data-proxy, dtfs-central-api, file-storage]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-portal-api \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/portal-api:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        # Enable outbound traffic from Portal API to the services subnet so we can access Cosmos and Storage
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-portal-api \
            --vnet tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.app_service_plan }}-app-service-plan-egress

    - name: Private endpoint
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource".
        #     The purpose of connection-name is unknown.
        inlineScript: |
          portal_api_id=$(az webapp show --name tfs-${{ env.environment }}-portal-api --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-portal-api \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$portal_api_id" \
            --group-id sites \
            --connection-name tfs-${{ env.environment }}-portal-api

    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
        # NB the -z tests below are checking 
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-portal-api --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-portal-api --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-api --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-api \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
            
            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-api.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-api.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Update private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-portal-api --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-api --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-api \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-portal-api.scm --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-api.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-api.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-portal-api \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-portal-api \
            --docker-container-logging filesystem

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-portal-api \
            --always-on true

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
        # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        inlineScript: |
          az webapp config appsettings set --name tfs-${{ env.environment }}-portal-api \
            --settings \
              WEBSITE_DNS_SERVER="168.63.129.16" \
              WEBSITE_VNET_ROUTE_ALL=1 \
              PORT=5000 \
              WEBSITES_PORT=5000

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          mongo_connection_string=$(az cosmosdb keys list --name tfs-${{ env.environment }}-mongo --type connection-strings --query "connectionStrings[0].connectionString" -o tsv | sed -e "s/&replicaSet=globaldb//g")
          echo "Mongo connection string: $mongo_connection_string"

          reference_data_proxy_url=$(az webapp show --name tfs-${{ env.environment }}-reference-data-proxy --query defaultHostName -o tsv)
          echo "Reference data proxy url: http://$reference_data_proxy_url"

          dtfs_central_api_url=$(az webapp show --name tfs-${{ env.environment }}-dtfs-central-api --query defaultHostName -o tsv)
          echo "DTFS central API url: http://$dtfs_central_api_url"


          portal_file_storage_key=$(az storage account keys list --account-name tfs${{ env.environment }}storage --query [0].value -o tsv)


          az webapp config connection-string set --name tfs-${{ env.environment }}-portal-api \
            --connection-string-type custom \
            --settings \
              AZURE_PORTAL_EXPORT_FOLDER="${{ env.AZURE_PORTAL_EXPORT_FOLDER }}" \
              AZURE_PORTAL_FILESHARE_NAME="${{ env.AZURE_PORTAL_FILESHARE_NAME }}" \
              AZURE_PORTAL_STORAGE_ACCESS_KEY="$portal_file_storage_key" \
              AZURE_PORTAL_STORAGE_ACCOUNT="tfs${{ env.environment }}storage" \
              AZURE_WORKFLOW_EXPORT_FOLDER="${{ env.AZURE_WORKFLOW_EXPORT_FOLDER }}" \
              AZURE_WORKFLOW_FILESHARE_NAME="${{ env.AZURE_WORKFLOW_FILESHARE_NAME }}" \
              AZURE_WORKFLOW_IMPORT_FOLDER="${{ env.AZURE_WORKFLOW_IMPORT_FOLDER }}" \
              AZURE_WORKFLOW_STORAGE_ACCOUNT="${{ env.AZURE_WORKFLOW_STORAGE_ACCOUNT }}" \
              AZURE_WORKFLOW_STORAGE_ACCESS_KEY="${{ env.AZURE_WORKFLOW_STORAGE_ACCESS_KEY }}" \
              MONGO_INITDB_DATABASE="${{ env.database_name }}" \
              MONGODB_URI="$mongo_connection_string" \
              JWT_SIGNING_KEY="${{ env.JWT_SIGNING_KEY }}" \
              JWT_VALIDATING_KEY="${{ env.JWT_VALIDATING_KEY }}" \
              GOV_NOTIFY_API_KEY="${{ env.GOV_NOTIFY_API_KEY }}" \
              GOV_NOTIFY_EMAIL_RECIPIENT="${{ env.GOV_NOTIFY_EMAIL_RECIPIENT }}" \
              DTFS_PORTAL_SCHEDULER="${{ env.DTFS_PORTAL_SCHEDULER }}" \
              FETCH_WORKFLOW_TYPE_B_SCHEDULE="${{ env.FETCH_WORKFLOW_TYPE_B_SCHEDULE }}" \
              REFERENCE_DATA_PROXY_URL="http://$reference_data_proxy_url" \
              DTFS_CENTRAL_API="http://$dtfs_central_api_url"            

  trade-finance-manager-api:
    name: Trade Finance Manager API
    needs: [vnet, private-dns, cosmos-db-private, reference-data-proxy, dtfs-central-api]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/trade-finance-manager-api:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        # Enable outbound traffic from Portal API to the services subnet so we can access Cosmos and Storage
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --vnet tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.app_service_plan }}-app-service-plan-egress

    - name: Private endpoint
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource".
        #     The purpose of connection-name is unknown.
        inlineScript: |
          tfm_portal_id=$(az webapp show --name tfs-${{ env.environment }}-trade-finance-manager-api --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$tfm_portal_id" \
            --group-id sites \
            --connection-name tfs-${{ env.environment }}-trade-finance-manager-api

    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
        # NB the -z tests below are checking 
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-trade-finance-manager-api --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-trade-finance-manager-api --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-api --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-api \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
            
            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-api.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-api.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Update private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-trade-finance-manager-api --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-api --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-api \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-trade-finance-manager-api.scm --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-api.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-api.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --docker-container-logging filesystem

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --always-on true

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
        # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        inlineScript: |
          az webapp config appsettings set --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --settings \
              WEBSITE_DNS_SERVER="168.63.129.16" \
              WEBSITE_VNET_ROUTE_ALL=1 \
              PORT=5000 \
              WEBSITES_PORT=5000

    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          mongo_connection_string=$(az cosmosdb keys list --name tfs-${{ env.environment }}-mongo --type connection-strings --query "connectionStrings[0].connectionString" -o tsv | sed -e "s/&replicaSet=globaldb//g")
          echo "Mongo connection string: $mongo_connection_string"

          reference_data_proxy_url=$(az webapp show --name tfs-${{ env.environment }}-reference-data-proxy --query defaultHostName -o tsv)
          echo "Reference data proxy url: http://$reference_data_proxy_url"

          dtfs_central_api_url=$(az webapp show --name tfs-${{ env.environment }}-dtfs-central-api --query defaultHostName -o tsv)
          echo "DTFS central API url: http://$dtfs_central_api_url"

          az webapp config connection-string set --name tfs-${{ env.environment }}-trade-finance-manager-api \
            --connection-string-type custom \
            --settings \
              MONGO_INITDB_DATABASE="${{ env.database_name }}" \
              MONGODB_URI="$mongo_connection_string" \
              REFERENCE_DATA_PROXY_URL="http://$reference_data_proxy_url" \
              DTFS_CENTRAL_API="http://$dtfs_central_api_url"  
  # END API setup

  # START UI setup
  portal-ui:
    name: Portal UI
    needs: [vnet, private-dns, portal-api, reference-data-proxy, redis]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-portal-ui \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/portal-ui:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        # Enable outbound traffic to the private-endpoints subnet so we can access Portal API and Redis
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-portal-ui \
            --vnet tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.app_service_plan }}-app-service-plan-egress

    - name: Private endpoint
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource"
        #     The purpose of connection-name is unknown.
        inlineScript: |
          portal_ui_id=$(az webapp show --name tfs-${{ env.environment }}-portal-ui --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-portal-ui \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$portal_ui_id" \
            --group-id sites \
            --connection-name tfs-${{ env.environment }}-portal-ui

    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-portal-ui --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-portal-ui --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-ui --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-ui \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
            
            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-ui.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-ui.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Updating private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-portal-ui --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-ui --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-ui \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-portal-ui.scm --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-portal-ui.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-portal-ui.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-portal-ui \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-portal-ui \
            --docker-container-logging filesystem

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-portal-ui \
            --always-on true

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
        # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        inlineScript: |
          deal_api=$(az webapp show --name tfs-${{ env.environment }}-portal-api --query defaultHostName -o tsv)
          reference_data_proxy_url=$(az webapp show --name tfs-${{ env.environment }}-reference-data-proxy --query defaultHostName -o tsv)
          
          redis_hostname=$(az redis show --name tfs-${{ env.environment }}-redis --query hostName --output tsv)
          redis_sslPort=$(az redis show --name tfs-${{ env.environment }}-redis --query sslPort --output tsv)
          redis_key=$(az redis list-keys --name tfs-${{ env.environment }}-redis --query primaryKey --output tsv)
          echo "REDIS CONNECTION: $redis_key@$redis_hostname:$redis_sslPort"

          az webapp config appsettings set --name tfs-${{ env.environment }}-portal-ui \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000 \
              DEAL_API_URL="https://$deal_api" \
              COMPANIES_HOUSE_API_URL="${{ env.COMPANIES_HOUSE_API_URL }}" \
              WEBSITE_DNS_SERVER="168.63.129.16" \
              WEBSITE_VNET_ROUTE_ALL=1 \
              REDIS_HOSTNAME="$redis_hostname" \
              REDIS_PORT="$redis_sslPort" \
              REDIS_KEY="$redis_key" \
              REFERENCE_DATA_PROXY_URL="http://$reference_data_proxy_url"
              
    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config connection-string set --name tfs-${{ env.environment }}-portal-ui \
            --connection-string-type custom \
            --settings \
              SESSION_SECRET="${{ env.SESSION_SECRET }}" \
              COMPANIES_HOUSE_API_KEY="${{ env.COMPANIES_HOUSE_API_KEY }}"
 
  trade-finance-manager-ui:
    name: Trade Finance Manager UI
    needs: [vnet, private-dns, trade-finance-manager-api, redis]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp create --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --plan ${{ env.app_service_plan }} \
            --deployment-container-image-name ${{ env.registry }}/trade-finance-manager-ui:${{ env.environment }}

    - name: Vnet integration
      uses: Azure/cli@v1.0.0
      with:
        # Enable outbound traffic to the private-endpoints subnet so we can access TFM API and Redis
        inlineScript: |
          az webapp vnet-integration add --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --vnet tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.app_service_plan }}-app-service-plan-egress

    - name: Private endpoint
      uses: Azure/cli@v1.0.0
      with:
        # Restrict inbound traffic to not be open to the Internet
        # NB: group-id isn't well documented. It means "Target sub-resource"
        #     The purpose of connection-name is unknown.
        inlineScript: |
          tfm_ui_id=$(az webapp show --name tfs-${{ env.environment }}-trade-finance-manager-ui --query "id" -o tsv)
          az network private-endpoint create \
            --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-private-endpoints \
            --private-connection-resource-id "$tfm_ui_id" \
            --group-id sites \
            --connection-name tfs-${{ env.environment }}-trade-finance-manager-ui

    - name: DNS A-records
      uses: Azure/cli@v1.0.0
      with:
        # We have to add explicit A records so that App Service names resolve correctly to the private endpoint address
        # https://docs.microsoft.com/en-us/azure/app-service/networking/private-endpoint#dns
        inlineScript: |
          ipv4_address=$(az network private-dns record-set a show --name tfs-${{ env.environment }}-trade-finance-manager-ui --zone-name "privatelink.azurewebsites.net" --query "aRecords[0].ipv4Address" -o tsv || echo "")

          interface_id=$(az network private-endpoint show --name tfs-${{ env.environment }}-trade-finance-manager-ui --query 'networkInterfaces[0].id' -o tsv)
          interface_ip=$(az resource show --ids "$interface_id" --query "properties.ipConfigurations[0].properties.privateIPAddress" -o tsv)
          
          # Create
          if [ -z "$ipv4_address" ]
          then
            echo Setting private link IP address...

            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-ui --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-ui \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
            
            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-ui.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-ui.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

          # Update
          if [ "$ipv4_address" != "$interface_ip" ]
          then
            echo Updating private link IP address...

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-trade-finance-manager-ui --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-ui --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-ui \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip

            az network private-dns record-set a delete --name tfs-${{ env.environment }}-trade-finance-manager-ui.scm --zone-name "privatelink.azurewebsites.net" --yes
            az network private-dns record-set a create --name tfs-${{ env.environment }}-trade-finance-manager-ui.scm --zone-name "privatelink.azurewebsites.net"
            az network private-dns record-set a add-record \
              --record-set-name tfs-${{ env.environment }}-trade-finance-manager-ui.scm \
              --zone-name "privatelink.azurewebsites.net" \
              --ipv4-address $interface_ip
          fi

    - name: Continuous deployment
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp deployment container config --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --enable-cd true

    - name: Enable container logging
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp log config --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --docker-container-logging filesystem

    - name: Always-on
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config set --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --always-on true

    - name: Environment variables
      uses: Azure/cli@v1.0.0
      with:
        # Apparently the only way to resolve private DNS entries is to use theIP address below. Cool story.
        # See: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#azure-dns-private-zones
        # NB we're setting PORT for the container and WEBSITES_PORT for Azure.
        inlineScript: |
          tfm_api=$(az webapp show --name tfs-${{ env.environment }}-trade-finance-manager-api --query defaultHostName -o tsv)
          reference_data_proxy_url=$(az webapp show --name tfs-${{ env.environment }}-reference-data-proxy --query defaultHostName -o tsv)
          
          redis_hostname=$(az redis show --name tfs-${{ env.environment }}-redis --query hostName --output tsv)
          redis_sslPort=$(az redis show --name tfs-${{ env.environment }}-redis --query sslPort --output tsv)
          redis_key=$(az redis list-keys --name tfs-${{ env.environment }}-redis --query primaryKey --output tsv)
          echo "REDIS CONNECTION: $redis_key@$redis_hostname:$redis_sslPort"

          az webapp config appsettings set --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --settings \
              PORT=5000 \
              WEBSITES_PORT=5000 \
              TRADE_FINANCE_MANAGER_API_URL="https://$tfm_api" \
              WEBSITE_DNS_SERVER="168.63.129.16" \
              WEBSITE_VNET_ROUTE_ALL=1 \
              REDIS_HOSTNAME="$redis_hostname" \
              REDIS_PORT="$redis_sslPort" \
              REDIS_KEY="$redis_key" \
              REFERENCE_DATA_PROXY_URL="http://$reference_data_proxy_url"
              
    - name: Secrets
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az webapp config connection-string set --name tfs-${{ env.environment }}-trade-finance-manager-ui \
            --connection-string-type custom \
            --settings \
              SESSION_SECRET="${{ env.SESSION_SECRET }}"
  # END UI setup

  # START Application gateways
  application-gateway-portal:
    name: Application Gateway Portal
    needs: [vnet, public-ip, portal-ui]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}
 
    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network application-gateway create --name tfs-${{ env.environment }}-gw \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-gateway \
            --public-ip-address tfs-${{ env.environment }}-ip \
            --frontend-port 80 \
            --max-capacity 5 --min-capacity 1 \
            --servers tfs-${{ env.environment }}-portal-ui.azurewebsites.net \
            --sku Standard_v2

    - name: Https ingress for data migration
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          cert="${{ env.MIGRATION_SSL_CERTIFICATE }}"
          if [ ! -z "$cert" ]
          then
            # Create the certificate file from the secret value:
            echo $cert | base64 -d > cert.pfx

            az network application-gateway ssl-cert create \
              --gateway-name tfs-${{ env.environment }}-gw \
              --name ${{ env.environment }}-cert \
              --cert-password ${{ env.MIGRATION_SSL_CERTIFICATE_PASSWORD }} \
              --cert-file cert.pfx

            echo "Creating frontend port"
            az network application-gateway frontend-port create \
              --gateway-name tfs-${{ env.environment }}-gw \
              --name tfs-${{ env.environment }}-port-https \
              --port 443

            echo "Creating HTTP listener..."
            az network application-gateway http-listener create \
              --gateway-name tfs-${{ env.environment }}-gw \
              --name ${{ env.environment }}-https \
              --frontend-port tfs-${{ env.environment }}-port-https \
              --ssl-cert ${{ env.environment }}-cert

            echo "Creating rule..."
            az network application-gateway rule create \
              --gateway-name tfs-${{ env.environment }}-gw \
              --name ${{ env.environment }}-migration \
              --http-listener ${{ env.environment }}-https \
              --http-settings appGatewayBackendHttpSettings \
              --address-pool appGatewayBackendPool
          fi

    - name: Healthcheck probe
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network application-gateway probe create --name healthcheck \
            --gateway-name tfs-${{ env.environment }}-gw \
            --protocol Https \
            --path "/healthcheck" \
            --host-name-from-http-settings true

    - name: Update back-end http settings
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          httpsettings_name=$(az network application-gateway show --name tfs-${{ env.environment }}-gw --query "backendHttpSettingsCollection[0].name" -o tsv)
          az network application-gateway http-settings update --name $httpsettings_name \
            --gateway-name tfs-${{ env.environment }}-gw \
            --host-name-from-backend-pool true \
            --probe healthcheck --enable-probe true \
            --protocol Https --port 443

  application-gateway-tfm:
    name: Application Gateway TFM
    needs: [vnet, public-ip, trade-finance-manager-ui]
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}
 
    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network application-gateway create --name tfs-${{ env.environment }}-tfm-gw \
            --vnet-name tfs-${{ env.app_service_plan }}-vnet \
            --subnet ${{ env.environment }}-gateway \
            --public-ip-address tfs-${{ env.environment }}-tfm-ip \
            --frontend-port 80 \
            --max-capacity 5 --min-capacity 1 \
            --servers tfs-${{ env.environment }}-trade-finance-manager-ui.azurewebsites.net \
            --sku Standard_v2

    - name: Https ingress for data migration
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          cert="${{ env.MIGRATION_SSL_CERTIFICATE }}"
          if [ ! -z "$cert" ]
          then
            # Create the certificate file from the secret value:
            echo $cert | base64 -d > cert.pfx

            az network application-gateway ssl-cert create \
              --gateway-name tfs-${{ env.environment }}-tfm-gw \
              --name ${{ env.environment }}-cert \
              --cert-password ${{ env.MIGRATION_SSL_CERTIFICATE_PASSWORD }} \
              --cert-file cert.pfx

            echo "Creating frontend port"
            az network application-gateway frontend-port create \
              --gateway-name tfs-${{ env.environment }}-tfm-gw \
              --name tfs-${{ env.environment }}-port-https \
              --port 443

            echo "Creating HTTP listener..."
            az network application-gateway http-listener create \
              --gateway-name tfs-${{ env.environment }}-tfm-gw \
              --name ${{ env.environment }}-https \
              --frontend-port tfs-${{ env.environment }}-port-https \
              --ssl-cert ${{ env.environment }}-cert

            echo "Creating rule..."
            az network application-gateway rule create \
              --gateway-name tfs-${{ env.environment }}-tfm-gw \
              --name ${{ env.environment }}-migration \
              --http-listener ${{ env.environment }}-https \
              --http-settings appGatewayBackendHttpSettings \
              --address-pool appGatewayBackendPool
          fi

    - name: Healthcheck probe
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az network application-gateway probe create --name healthcheck \
            --gateway-name tfs-${{ env.environment }}-tfm-gw \
            --protocol Https \
            --path "/healthcheck" \
            --host-name-from-http-settings true

    - name: Update back-end http settings
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          httpsettings_name=$(az network application-gateway show --name tfs-${{ env.environment }}-tfm-gw --query "backendHttpSettingsCollection[0].name" -o tsv)
          az network application-gateway http-settings update --name $httpsettings_name \
            --gateway-name tfs-${{ env.environment }}-tfm-gw \
            --host-name-from-backend-pool true \
            --probe healthcheck --enable-probe true \
            --protocol Https --port 443

  # END Application gateways

  # START Front Doors
  front-door-portal:
    # NB Front Door takes a little while to be available
    # So you won't get a successful request for the first few minutes.
    name: Portal Front Door WAF/DDoS
    needs: application-gateway-portal
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

          # Front door requires an extension to the az cli:
          az extension add --name front-door

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          gateway_ip_id=$(az network application-gateway show --name tfs-${{ env.environment }}-gw --query "frontendIpConfigurations[0].publicIpAddress.id" -o tsv)
          gateway_ip=$(az resource show --ids "$gateway_ip_id" --query "properties.ipAddress" -o tsv)

          az network front-door create --name tfs-${{ env.environment }}-fd \
            --accepted-protocols Https \
            --forwarding-protocol HttpOnly \
            --backend-address $gateway_ip \
            --probeMethod GET \
            --protocol Http \
            --path "/healthcheck"

    - name: Redirect to https
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          frontend_endpoint_name=$(az network front-door show --name tfs-${{ env.environment }}-fd --query "frontendEndpoints[0].name" -o tsv)
          az network front-door routing-rule create --front-door-name tfs-${{ env.environment }}-fd \
            --name RedirectToHttps \
            --frontend-endpoints $frontend_endpoint_name \
            --route-type Redirect \
            --accepted-protocols Http \
            --redirect-protocol HttpsOnly

    # - name: API routing
    #   uses: Azure/cli@v1.0.0
    #   with:
    #     inlineScript: |
    #       frontend_endpoint_name=$(az network front-door show --name tfs-${{ env.environment }}-fd --query "frontendEndpoints[0].name" -o tsv)
    #       az network front-door load-balancing create --front-door-name tfs-${{ env.environment }}-fd \
    #         --name api-lb \
    #         --sample-size 4 \
    #         --successful-samples-required 2
    #       az network front-door probe create --front-door-name tfs-${{ env.environment }}-fd \
    #         --interval 60 \
    #         --name api-probe \
    #         --path /healthcheck \
    #         --probeMethod GET \
    #         --protocol Https
    #       az network front-door backend-pool create --front-door-name tfs-${{ env.environment }}-fd \
    #         --name portal-api \
    #         --address tfs-${{ env.environment }}-portal-api.azurewebsites.net \
    #         --load-balancing api-lb \
    #         --probe api-probe
    #       az network front-door routing-rule create --front-door-name tfs-${{ env.environment }}-fd \
    #         --name API \
    #         --frontend-endpoints $frontend_endpoint_name \
    #         --route-type Forward \
    #         --accepted-protocols Https \
    #         --forwarding-protocol HttpsOnly \
    #         --backend-pool portal-api \
    #         --patterns "/v1/*"

  front-door-tfm:
    # NB Front Door takes a little while to be available
    # So you won't get a successful request for the first few minutes.
    name: TFM Front Door WAF/DDoS
    needs: application-gateway-tfm
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ env.credentials }}

    - name: Defaults
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          az configure --defaults location=uksouth
          az configure --defaults group=${{ env.resource_group }}

          # Front door requires an extension to the az cli:
          az extension add --name front-door

    - name: Create
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          gateway_ip_id=$(az network application-gateway show --name tfs-${{ env.environment }}-tfm-gw --query "frontendIpConfigurations[0].publicIpAddress.id" -o tsv)
          gateway_ip=$(az resource show --ids "$gateway_ip_id" --query "properties.ipAddress" -o tsv)

          az network front-door create --name tfs-${{ env.environment }}-tfm-fd \
            --accepted-protocols Https \
            --forwarding-protocol HttpOnly \
            --backend-address $gateway_ip \
            --probeMethod GET \
            --protocol Http \
            --path "/healthcheck"

    - name: Redirect to https
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: |
          frontend_endpoint_name=$(az network front-door show --name tfs-${{ env.environment }}-tfm-fd --query "frontendEndpoints[0].name" -o tsv)
          az network front-door routing-rule create --front-door-name tfs-${{ env.environment }}-tfm-fd \
            --name RedirectToHttps \
            --frontend-endpoints $frontend_endpoint_name \
            --route-type Redirect \
            --accepted-protocols Http \
            --redirect-protocol HttpsOnly

    # - name: API routing
    #   uses: Azure/cli@v1.0.0
    #   with:
    #     inlineScript: |
    #       frontend_endpoint_name=$(az network front-door show --name tfs-${{ env.environment }}-fd --query "frontendEndpoints[0].name" -o tsv)
    #       az network front-door load-balancing create --front-door-name tfs-${{ env.environment }}-fd \
    #         --name api-lb \
    #         --sample-size 4 \
    #         --successful-samples-required 2
    #       az network front-door probe create --front-door-name tfs-${{ env.environment }}-fd \
    #         --interval 60 \
    #         --name api-probe \
    #         --path /healthcheck \
    #         --probeMethod GET \
    #         --protocol Https
    #       az network front-door backend-pool create --front-door-name tfs-${{ env.environment }}-fd \
    #         --name portal-api \
    #         --address tfs-${{ env.environment }}-portal-api.azurewebsites.net \
    #         --load-balancing api-lb \
    #         --probe api-probe
    #       az network front-door routing-rule create --front-door-name tfs-${{ env.environment }}-fd \
    #         --name API \
    #         --frontend-endpoints $frontend_endpoint_name \
    #         --route-type Forward \
    #         --accepted-protocols Https \
    #         --forwarding-protocol HttpsOnly \
    #         --backend-pool portal-api \
    #         --patterns "/v1/*"
  # END Front Doors
  
