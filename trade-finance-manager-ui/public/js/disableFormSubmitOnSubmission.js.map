{"version":3,"file":"disableFormSubmitOnSubmission.js","mappings":"aA6EyCA,MACvC,MAAMC,EAxEqBC,MAC3B,MAAMC,EAAQC,SAASC,iBAAiB,QAExC,IAAKF,EAAMG,OACT,OAAO,KAGT,MAAML,EAAWE,EAAMA,EAAMG,OAAS,GAEtC,OAAKL,GACI,IAGM,EA2DEC,GAEjB,IAAKD,EACH,OAGF,IAAIM,EAAiB,KACjBC,EAA4B,KAEhCP,EAASQ,iBAAiB,UAAWC,IACnC,MAAM,UAAEC,GAAcD,EAEtB,KAAMC,aAAqBC,aACzB,OAIF,GADiCL,EACL,CAE1B,GADkCI,IAAcJ,EAK9C,YADAG,EAAMG,kBA9EoBC,EAiFHN,aAhFEI,aAC7BE,EAAgBC,SAWgBJ,KAC9BA,aAAqBC,cACvBD,EAAUK,gBAAgB,YAC1BL,EAAUK,gBAAgB,iBAC5B,EAiEIC,CAA2BV,EAC7B,CAnF8BO,MAMGH,KAC/BA,aAAqBC,cACvBD,EAAUO,aAAa,WAAY,IACnCP,EAAUO,aAAa,gBAAiB,QAC1C,EA2EEC,CAA4BR,GAC5B,MAAMS,EA3D4BT,KACpC,MAAMU,EAAcjB,SAASkB,cAAc,SAiB3C,OAfAD,EAAYH,aAAa,KAAM,oCAC/BG,EAAYH,aAAa,OAAQ,UAEjC,CAAU,SAAUK,SAASC,IAC3B,MAAMC,EAAQd,EAAUe,aAAaF,GAEjCC,GACFJ,EAAYH,aAAaM,EAAWC,EACtC,IAGFJ,EAAYM,UAAUC,IAAI,mBAE1BjB,EAAUkB,MAAMR,GAETA,CAAW,EAyCWS,CAA6BnB,GAExDJ,EAAiBI,EACjBH,EAA4BY,CAAkB,GAC9C,EAGJpB,I","sources":["webpack://DTFS_TFM/../libs/common/src/ui-scripts/disable-form-submit-on-submission.js"],"sourcesContent":["/**\n * Gets the last form on the page if any forms are present.\n * The last form is taken as it is foreseeable to have multiple forms on a page,\n * and the submit button should always be in the last form on a page.\n * @returns {HTMLFormElement | null}\n */\nconst getLastFormIfPresent = () => {\n  const forms = document.querySelectorAll('form');\n\n  if (!forms.length) {\n    return null;\n  }\n\n  const lastForm = forms[forms.length - 1];\n\n  if (!lastForm) {\n    return null;\n  }\n\n  return lastForm;\n};\n\nconst validateAndDeleteElement = (elementToDelete) => {\n  if (elementToDelete instanceof HTMLElement) {\n    elementToDelete.remove();\n  }\n};\n\nconst validateAndDisableSubmitter = (submitter) => {\n  if (submitter instanceof HTMLElement) {\n    submitter.setAttribute('disabled', '');\n    submitter.setAttribute('aria-disabled', 'true');\n  }\n};\n\nconst validateAndEnableSubmitter = (submitter) => {\n  if (submitter instanceof HTMLElement) {\n    submitter.removeAttribute('disabled');\n    submitter.removeAttribute('aria-disabled');\n  }\n};\n\n/**\n * Creates a hidden input of the submitter used to submit the form.\n * This hidden input copies any name or value attributes that the submission submitter has,\n * as when we disable the initial submitter, the disabled submitter will not submit\n * this information to the server.\n * @param {HTMLElement} submitter\n */\nconst createHiddenInputOfSubmitter = (submitter) => {\n  const hiddenInput = document.createElement('input');\n\n  hiddenInput.setAttribute('id', 'resubmit-prevention-hidden-input');\n  hiddenInput.setAttribute('type', 'hidden');\n\n  [('name', 'value')].forEach((attribute) => {\n    const value = submitter.getAttribute(attribute);\n\n    if (value) {\n      hiddenInput.setAttribute(attribute, value);\n    }\n  });\n\n  hiddenInput.classList.add('js-hidden-input');\n\n  submitter.after(hiddenInput);\n\n  return hiddenInput;\n};\n\n/**\n * Adds an event listener to disable form resubmission using the same submitter.\n *\n * This intentionally does not disable all buttons on the form on submission, but can be updated to do so if\n * issues regarding double submissions are not resolved.\n * @returns {void}\n */\nconst addDisableFormSubmitOnSubmission = () => {\n  const lastForm = getLastFormIfPresent();\n\n  if (!lastForm) {\n    return;\n  }\n\n  let priorSubmitter = null;\n  let priorSubmitterHiddenInput = null;\n\n  lastForm.addEventListener('submit', (event) => {\n    const { submitter } = event;\n\n    if (!(submitter instanceof HTMLElement)) {\n      return;\n    }\n\n    const hasPreviouslySubmitted = !!priorSubmitter;\n    if (hasPreviouslySubmitted) {\n      const isSameSubmitterAsPrevious = submitter === priorSubmitter;\n      if (isSameSubmitterAsPrevious) {\n        // prevents a duplicate resubmission if a user resubmits the form not using buttons\n        // ie from using keyboard navigation to submit the form\n        event.preventDefault();\n        return;\n      }\n      validateAndDeleteElement(priorSubmitterHiddenInput);\n      validateAndEnableSubmitter(priorSubmitter);\n    }\n\n    validateAndDisableSubmitter(submitter);\n    const hiddenInputElement = createHiddenInputOfSubmitter(submitter);\n\n    priorSubmitter = submitter;\n    priorSubmitterHiddenInput = hiddenInputElement;\n  });\n};\n\naddDisableFormSubmitOnSubmission();\n"],"names":["addDisableFormSubmitOnSubmission","lastForm","getLastFormIfPresent","forms","document","querySelectorAll","length","priorSubmitter","priorSubmitterHiddenInput","addEventListener","event","submitter","HTMLElement","preventDefault","elementToDelete","remove","removeAttribute","validateAndEnableSubmitter","setAttribute","validateAndDisableSubmitter","hiddenInputElement","hiddenInput","createElement","forEach","attribute","value","getAttribute","classList","add","after","createHiddenInputOfSubmitter"],"sourceRoot":""}