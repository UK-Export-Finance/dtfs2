{"version":3,"file":"enableSelectAllTableCheckbox.js","mappings":"6BACMA,EAA6BC,SAASC,cADD,gEAIrCC,EAA8BF,SAASG,iBADD,sEAuBtCC,EAAgD,WALpDC,MAAMC,UAAUC,MAAMC,KAAKN,GAA6B,SAACO,GAAQ,OAAKA,EAASC,OAAO,IAOpFX,EAA2BW,SAAU,EAJvCL,MAAMC,UAAUK,KAAKH,KAAKN,GAA6B,SAACO,GAAQ,OAAMA,EAASC,OAAO,MAQpFX,EAA2BW,SAAU,EAGzC,EAGOX,IAILA,EAA2Ba,iBAAiB,UAAU,SAACC,GACjDA,EAAMC,OAAOJ,QApCnBR,EAA4Ba,SAAQ,SAACN,GAEnCA,EAASC,SAAU,CACrB,IAIAR,EAA4Ba,SAAQ,SAACN,GAEnCA,EAASC,SAAU,CACrB,GA+BA,IAEAR,EAA4Ba,SAAQ,SAACN,GACnCA,EAASG,iBAAiB,UAAU,WAClCR,GACF,GACF,M","sources":["webpack://DTFS_TFM/./scripts/enable-select-all-table-checkbox.js"],"sourcesContent":["const selectAllTableCellCheckboxSelector = 'table.govuk-table input[type=\"checkbox\"]#select-all-checkbox';\nconst selectAllTableCellCheckbox = document.querySelector(selectAllTableCellCheckboxSelector);\n\nconst allOtherTableCellCheckboxesSelector = 'table.govuk-table input[type=\"checkbox\"]:not(#select-all-checkbox)';\nconst allOtherTableCellCheckboxes = document.querySelectorAll(allOtherTableCellCheckboxesSelector);\n\nconst checkAllTableCheckboxes = () => {\n  allOtherTableCellCheckboxes.forEach((checkbox) => {\n    // eslint-disable-next-line no-param-reassign\n    checkbox.checked = true;\n  });\n};\n\nconst uncheckAllTableCheckboxes = () => {\n  allOtherTableCellCheckboxes.forEach((checkbox) => {\n    // eslint-disable-next-line no-param-reassign\n    checkbox.checked = false;\n  });\n};\n\nconst areAllOtherTableCellCheckboxesChecked = () =>\n  Array.prototype.every.call(allOtherTableCellCheckboxes, (checkbox) => checkbox.checked);\n\nconst isAnyOtherTableCellCheckboxNotChecked = () =>\n  Array.prototype.some.call(allOtherTableCellCheckboxes, (checkbox) => !checkbox.checked);\n\nconst updateSelectAllTableCellCheckboxOnTableChange = () => {\n  if (areAllOtherTableCellCheckboxesChecked()) {\n    selectAllTableCellCheckbox.checked = true;\n    return;\n  }\n  if (isAnyOtherTableCellCheckboxNotChecked()) {\n    selectAllTableCellCheckbox.checked = false;\n    return;\n  }\n};\n\nconst enableSelectAllTableCheckboxIfPresent = () => {\n  if (!selectAllTableCellCheckbox) {\n    return;\n  }\n\n  selectAllTableCellCheckbox.addEventListener('change', (event) => {\n    if (event.target.checked) {\n      checkAllTableCheckboxes();\n    } else {\n      uncheckAllTableCheckboxes();\n    }\n  });\n\n  allOtherTableCellCheckboxes.forEach((checkbox) => {\n    checkbox.addEventListener('change', () => {\n      updateSelectAllTableCellCheckboxOnTableChange();\n    });\n  });\n};\n\nenableSelectAllTableCheckboxIfPresent();\n"],"names":["selectAllTableCellCheckbox","document","querySelector","allOtherTableCellCheckboxes","querySelectorAll","updateSelectAllTableCellCheckboxOnTableChange","Array","prototype","every","call","checkbox","checked","some","addEventListener","event","target","forEach"],"sourceRoot":""}