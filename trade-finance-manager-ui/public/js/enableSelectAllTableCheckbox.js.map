{"version":3,"file":"enableSelectAllTableCheckbox.js","mappings":"6BACMA,EAA6BC,SAASC,cADD,gEAIrCC,EAA8BF,SAASG,iBADD,sEAiBtCC,EAAwC,WAAH,OAASC,MAAMC,UAAUC,MAAMC,KAAKN,GAA6B,SAACO,GAAQ,OAAKA,EAASC,OAAO,GAAC,EAIrIC,EAAgD,WAChDP,IACFL,EAA2BW,SAAU,EAJWL,MAAMC,UAAUM,KAAKJ,KAAKN,GAA6B,SAACO,GAAQ,OAAMA,EAASC,OAAO,MAQtIX,EAA2BW,SAAU,EAEzC,EAGOX,IAILA,EAA2Bc,iBAAiB,UAAU,SAACC,GACjDA,EAAMC,OAAOL,QAjCnBR,EAA4Bc,SAAQ,SAACP,GAEnCA,EAASC,SAAU,CACrB,IAIAR,EAA4Bc,SAAQ,SAACP,GAEnCA,EAASC,SAAU,CACrB,GA4BA,IAEIN,MACFL,EAA2BW,SAAU,GAGvCR,EAA4Bc,SAAQ,SAACP,GACnCA,EAASI,iBAAiB,UAAU,WAClCF,GACF,GACF,M","sources":["webpack://DTFS_TFM/./scripts/enable-select-all-table-checkbox.js"],"sourcesContent":["const selectAllTableCellCheckboxSelector = 'table.govuk-table input[type=\"checkbox\"]#select-all-checkbox';\nconst selectAllTableCellCheckbox = document.querySelector(selectAllTableCellCheckboxSelector);\n\nconst allOtherTableCellCheckboxesSelector = 'table.govuk-table input[type=\"checkbox\"]:not(#select-all-checkbox)';\nconst allOtherTableCellCheckboxes = document.querySelectorAll(allOtherTableCellCheckboxesSelector);\n\nconst checkAllTableCheckboxes = () => {\n  allOtherTableCellCheckboxes.forEach((checkbox) => {\n    // eslint-disable-next-line no-param-reassign\n    checkbox.checked = true;\n  });\n};\n\nconst uncheckAllTableCheckboxes = () => {\n  allOtherTableCellCheckboxes.forEach((checkbox) => {\n    // eslint-disable-next-line no-param-reassign\n    checkbox.checked = false;\n  });\n};\n\nconst areAllOtherTableCellCheckboxesChecked = () => Array.prototype.every.call(allOtherTableCellCheckboxes, (checkbox) => checkbox.checked);\n\nconst isAnyOtherTableCellCheckboxNotChecked = () => Array.prototype.some.call(allOtherTableCellCheckboxes, (checkbox) => !checkbox.checked);\n\nconst updateSelectAllTableCellCheckboxOnTableChange = () => {\n  if (areAllOtherTableCellCheckboxesChecked()) {\n    selectAllTableCellCheckbox.checked = true;\n    return;\n  }\n  if (isAnyOtherTableCellCheckboxNotChecked()) {\n    selectAllTableCellCheckbox.checked = false;\n  }\n};\n\nconst enableSelectAllTableCheckboxIfPresent = () => {\n  if (!selectAllTableCellCheckbox) {\n    return;\n  }\n\n  selectAllTableCellCheckbox.addEventListener('change', (event) => {\n    if (event.target.checked) {\n      checkAllTableCheckboxes();\n    } else {\n      uncheckAllTableCheckboxes();\n    }\n  });\n\n  if (areAllOtherTableCellCheckboxesChecked()) {\n    selectAllTableCellCheckbox.checked = true;\n  }\n\n  allOtherTableCellCheckboxes.forEach((checkbox) => {\n    checkbox.addEventListener('change', () => {\n      updateSelectAllTableCellCheckboxOnTableChange();\n    });\n  });\n};\n\nenableSelectAllTableCheckboxIfPresent();\n"],"names":["selectAllTableCellCheckbox","document","querySelector","allOtherTableCellCheckboxes","querySelectorAll","areAllOtherTableCellCheckboxesChecked","Array","prototype","every","call","checkbox","checked","updateSelectAllTableCellCheckboxOnTableChange","some","addEventListener","event","target","forEach"],"sourceRoot":""}