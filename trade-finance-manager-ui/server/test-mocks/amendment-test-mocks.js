const { TEAM_IDS, AMENDMENT_STATUS } = require('@ukef/dtfs2-common');
const { AMENDMENTS, DEAL, FACILITY, DECISIONS } = require('../constants');

const MOCK_DEAL = {
  _id: '61f6ac5b02fade01b1e8efef',
  dealSnapshot: {
    _id: '61f6ac5b02fade01b1e8efef',
    submissionType: DEAL.SUBMISSION_TYPE.MIA,
  },
  tfm: {
    leadUnderwriter: '12345678910',
  },
};
const MOCK_USER_UNDERWRITER_MANAGER = {
  _id: '12345678',
  username: 'UNDERWRITER_MANAGER_1',
  firstName: 'Joe',
  lastName: 'Bloggs',
  teams: [TEAM_IDS.UNDERWRITER_MANAGERS],
};

const MOCK_USER_UNDERWRITER = {
  _id: '100200300',
  username: 'UNDERWRITER_1',
  firstName: 'Joe',
  lastName: 'Bloggs',
  teams: [TEAM_IDS.UNDERWRITERS],
  email: 'test@test.com',
};

const MOCK_USER_PIM = {
  _id: '12345678',
  username: 'PIM',
  firstName: 'Joe',
  lastName: 'Bloggs',
  teams: [TEAM_IDS.PIM],
  email: 'testPim@test.com',
};

const MOCK_TEAM_UNDERWRITER_MANAGERS = [MOCK_USER_UNDERWRITER_MANAGER];

const session = {
  user: MOCK_USER_UNDERWRITER_MANAGER,
};

const MOCK_AMENDMENT = {
  amendmentId: '12345',
  facilityId: '45678',
  dealId: '999',
  ukefFacilityId: '1234567890',
  type: FACILITY.FACILITY_TYPE.CASH,
  status: AMENDMENT_STATUS.IN_PROGRESS,
  submittedByPim: true,
  requireUkefApproval: true,
  leadUnderwriter: null,
};

const MOCK_AMENDMENT_AUTOMATIC_APPROVAL = {
  ...MOCK_AMENDMENT,
  status: AMENDMENT_STATUS.COMPLETED,
  requireUkefApproval: false,
};

const MOCK_AMENDMENT_UNSUBMITTED = {
  ...MOCK_AMENDMENT,
  status: AMENDMENT_STATUS.IN_PROGRESS,
  submittedByPim: false,
};

const MOCK_AMENDMENT_UNDERWRITER_DECISION_NOT_SUBMITTED = {
  ...MOCK_AMENDMENT,
  ukefDecision: {
    reason: 'a reason for declining the amendment',
    conditions: 'a set of conditions for this amendment',
    comments: 'extra comments',
    submitted: false,
  },
};

const MOCK_AMENDMENT_UNDERWRITER_DECISION_SUBMITTED = {
  ...MOCK_AMENDMENT,
  ukefDecision: {
    reason: 'a reason for declining the amendment',
    conditions: 'a set of conditions for this amendment',
    comments: 'extra comments',
    submitted: true,
  },
};

const MOCK_AMENDMENT_LEAD_UNDERWRITER = {
  ...MOCK_AMENDMENT,
  leadUnderwriter: {
    _id: '12345678',
    firstName: 'Bob',
    lastName: 'Smith',
  },
};

const MOCK_AMENDMENT_BOTH_DECLINED = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: true,
  ukefDecision: {
    coverEndDate: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
    value: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
  },
};

const MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: true,
  ukefDecision: {
    coverEndDate: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.APPROVED_WITHOUT_CONDITIONS,
    value: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
    submitted: true,
  },
};

const MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_WITH_COVERENDDATE_SET = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: true,
  coverEndDate: 123,
  ukefDecision: {
    coverEndDate: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.APPROVED_WITHOUT_CONDITIONS,
    value: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
    submitted: true,
  },
};

const MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_COVERENDDATE = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: true,
  value: 123,
  ukefDecision: {
    coverEndDate: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
    value: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.APPROVED_WITHOUT_CONDITIONS,
    submitted: true,
  },
};

const MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_NOT_SUBMITTED = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  ukefDecision: {
    coverEndDate: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.APPROVED_WITHOUT_CONDITIONS,
    value: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
    submitted: false,
  },
};

const MOCK_AMENDMENT_COVERENDDATE = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: false,
  ukefDecision: {
    coverEndDate: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
  },
};

const MOCK_AMENDMENT_FACILITYVALUE = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: false,
  changeFacilityValue: true,
  ukefDecision: {
    value: DECISIONS.UNDERWRITER_MANAGER_DECISIONS.DECLINED,
  },
};

const MOCK_AMENDMENT_FACILITYVALUE_CHANGE = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: false,
  changeFacilityValue: true,
};

const MOCK_AMENDMENT_COVERENDDATE_CHANGE = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: false,
};

const MOCK_AMENDMENT_COVERENDDATE_CHANGE_USING_FACILITY_ENDDATE = {
  ...MOCK_AMENDMENT_COVERENDDATE_CHANGE,
  changeCoverEndDate: true,
  changeFacilityValue: false,
  isUsingFacilityEndDate: true,
};

const MOCK_AMENDMENT_FACILITYVALUE_AND_COVERENDDATE_CHANGE = {
  ...MOCK_AMENDMENT,
  changeCoverEndDate: true,
  changeFacilityValue: true,
};

const MOCK_AMENDMENT_BANK_DECISION = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.PROCEED,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_PROCEED_COVERENDDATE = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_WITH_COVERENDDATE_SET,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.PROCEED,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_PROCEED_VALUE = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_COVERENDDATE,
  value: 123,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.PROCEED,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_WITHDRAW = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.WITHDRAW,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_WITHDRAW_COVERENDDATE = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_WITH_COVERENDDATE_SET,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.WITHDRAW,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_WITHDRAW_VALUE = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_COVERENDDATE,
  value: 123,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.WITHDRAW,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_WITHDRAW_EFFECTIVE_DATE = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.WITHDRAW,
    effectiveDate: 1654698568,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_WITH_DATES = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.PROCEED,
    receivedDate: 1654698568,
  },
};

const MOCK_AMENDMENT_BANK_DECISION_WITH_EFFECTIVE_DATES = {
  ...MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  bankDecision: {
    decision: AMENDMENTS.AMENDMENT_BANK_DECISION.PROCEED,
    receivedDate: 1654698568,
    effectiveDate: 1654698568,
  },
};

const MOCK_AMENDMENT_AUTOMATIC_VALUE = {
  ...MOCK_AMENDMENT_AUTOMATIC_APPROVAL,
  value: 20000,
};

const MOCK_AMENDMENT_AUTOMATIC_COVERENDDATE = {
  ...MOCK_AMENDMENT_AUTOMATIC_APPROVAL,
  coverEndDate: 12345,
};

module.exports = {
  MOCK_DEAL,
  MOCK_USER_UNDERWRITER_MANAGER,
  session,
  MOCK_AMENDMENT,
  MOCK_AMENDMENT_AUTOMATIC_APPROVAL,
  MOCK_AMENDMENT_UNSUBMITTED,
  MOCK_AMENDMENT_UNDERWRITER_DECISION_NOT_SUBMITTED,
  MOCK_AMENDMENT_UNDERWRITER_DECISION_SUBMITTED,
  MOCK_AMENDMENT_LEAD_UNDERWRITER,
  MOCK_TEAM_UNDERWRITER_MANAGERS,
  MOCK_USER_UNDERWRITER,
  MOCK_USER_PIM,
  MOCK_AMENDMENT_BOTH_DECLINED,
  MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED,
  MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_NOT_SUBMITTED,
  MOCK_AMENDMENT_COVERENDDATE,
  MOCK_AMENDMENT_FACILITYVALUE,
  MOCK_AMENDMENT_FACILITYVALUE_CHANGE,
  MOCK_AMENDMENT_COVERENDDATE_CHANGE,
  MOCK_AMENDMENT_COVERENDDATE_CHANGE_USING_FACILITY_ENDDATE,
  MOCK_AMENDMENT_FACILITYVALUE_AND_COVERENDDATE_CHANGE,
  MOCK_AMENDMENT_BANK_DECISION,
  MOCK_AMENDMENT_BANK_DECISION_WITHDRAW,
  MOCK_AMENDMENT_BANK_DECISION_WITHDRAW_EFFECTIVE_DATE,
  MOCK_AMENDMENT_BANK_DECISION_WITH_DATES,
  MOCK_AMENDMENT_BANK_DECISION_WITH_EFFECTIVE_DATES,
  MOCK_AMENDMENT_AUTOMATIC_VALUE,
  MOCK_AMENDMENT_AUTOMATIC_COVERENDDATE,
  MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_COVERENDDATE,
  MOCK_AMENDMENT_BANK_DECISION_PROCEED_COVERENDDATE,
  MOCK_AMENDMENT_BANK_DECISION_PROCEED_VALUE,
  MOCK_AMENDMENT_BANK_DECISION_WITHDRAW_VALUE,
  MOCK_AMENDMENT_TWO_AMENDMENTS_ONE_DECLINED_WITH_COVERENDDATE_SET,
  MOCK_AMENDMENT_BANK_DECISION_WITHDRAW_COVERENDDATE,
};
